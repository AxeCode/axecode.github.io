<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[乐正]]></title>
  <link href="http://yuez.me/atom.xml" rel="self"/>
  <link href="http://yuez.me/"/>
  <updated>2015-06-29T19:44:20+08:00</updated>
  <id>http://yuez.me/</id>
  <author>
    <name><![CDATA[乐正]]></name>
    <email><![CDATA[zgs225@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[什么是线程]]></title>
    <link href="http://yuez.me/shen-me-shi-xian-cheng/"/>
    <updated>2015-06-01T21:44:33+08:00</updated>
    <id>http://yuez.me/shen-me-shi-xian-cheng</id>
    <content type="html"><![CDATA[<blockquote><p>要成就一个复杂的系统，各部分必须分工明确，各司其职。 —— 《人工科学》</p></blockquote>

<h2>线程和进程</h2>

<p>在上篇文章中（<a href="http://yuez.me/jin-cheng-miao-shu-he-kong-zhi/">进程描述和控制</a>），提出的进程概
念包含两个特点：</p>

<ul>
<li><p><strong>资源所有权</strong>：一个进程拥有包括一个存放进程映像的虚拟地址空间。一个进程总是拥
有对于资源的控制或所有权。操作系统提供对于资源访问的保护功能。</p></li>
<li><p><strong>调度/执行</strong>：一个进程具有一个执行状态和一个被分配的优先级，它是一个可以被操
作系统调度和分派的实体。</p></li>
</ul>


<p>分派的单位通常称为线程或轻量级进程；而拥有资源所有权的单位通常仍称为进程或者任务。</p>

<h4>多线程</h4>

<p><strong>多线程</strong>是指在操作系统单个进程内支持多个并发执行路径的能力。对应的每个进程只有
一个线程在执行的称为<strong>单线程方法</strong>。</p>

<p>在多线程环境中，进程被定义成资源分配的单位和一个被保护的单位。在一个进程中，可能
有一个或者多个线程，每个线程有：</p>

<ul>
<li>线程执行状态（运行、就绪等）</li>
<li>在未运行时保存的线程上下文。</li>
<li>一个执行栈。</li>
<li>用于每个线程局部变量的静态存储空间。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一次与 Arduino 交互]]></title>
    <link href="http://yuez.me/di-yi-ci-yu-arduino-jiao-hu/"/>
    <updated>2015-05-31T21:01:21+08:00</updated>
    <id>http://yuez.me/di-yi-ci-yu-arduino-jiao-hu</id>
    <content type="html"><![CDATA[<p>这是一个比较简单的实验，不过好歹也是让 Arduino 接受外界电子元件的输入值了。这是
套互动交通灯的实验，Arduino 等待行人按下按钮，这样行车灯会变红，行人灯会变绿。</p>

<h2>需要的电子元件</h2>

<ul>
<li>LED 灯（2红，2绿，1黄）</li>
<li>100Ω 电阻</li>
<li>10KΩ 高阻值电阻（用于下拉电阻）</li>
<li>按钮（有时供应商称之为微动开关）</li>
<li>面包板与导线</li>
</ul>


<h2>代码回顾</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">carRed</span>    <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">carGreen</span>  <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">carYellow</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">pedRed</span>    <span class="o">=</span>  <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pedGreen</span>  <span class="o">=</span>  <span class="mi">9</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">buttonPin</span> <span class="o">=</span>  <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">crossTime</span> <span class="o">=</span> <span class="mi">5000</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">changeTime</span><span class="p">;</span> <span class="c1">// Time of press button</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">carRed</span><span class="p">,</span>    <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">carGreen</span><span class="p">,</span>  <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">carYellow</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">pedRed</span><span class="p">,</span>    <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">pedGreen</span><span class="p">,</span>  <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">buttonPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">pedRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">buttonPin</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">HIGH</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">millis</span><span class="p">()</span> <span class="o">-</span> <span class="n">changeTime</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">changeLights</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">changeLights</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carGreen</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carYellow</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carYellow</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">pedRed</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">pedGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="n">crossTime</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">pedGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
</span><span class='line'>    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">pedGreen</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">pedRed</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carYellow</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carRed</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carGreen</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">carYellow</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">changeTime</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这次使用了一个能存储大数字的数据类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">chageTime</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于 Arduino 使用的 Atemga 32 只有很小的内存，所以合理分配与使用内存在这之上就显
得非常重要。</p>

<p>接下来就是让 Arduino 读取按钮输出值了，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pinMode</span><span class="p">(</span><span class="n">buttonPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句代码让 Arduino 将按钮所在的引脚设置为 <code>Input</code> 模式。在程序循环中，使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">buttonPin</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>来检查引脚的状态。</p>

<h2>硬件回顾</h2>

<p>本次与 Arduino 交互的元件是按钮，或者叫开关。按钮不是之间连接在电源线和引脚之间
的，在按钮和地之间有一个电阻，这个电阻叫<strong>下拉电阻</strong>。对应的还有<strong>上拉电阻</strong>，它
们对保证按钮正常工作是非常重要的。</p>

<h4>逻辑状态</h4>

<p><strong>逻辑电路</strong>是一种只有开、关两种状态的电路，用布尔数0和1表示。电路处于关状态时，
输出端的电压接近0V。电路处于开状态时用高电平表示，输出端接近于电源供电电压。</p>

<p>如果不能确定状态接近所需要的电压，这部分电路可以被认为是<strong>浮动的</strong>（既不是高电平
，也不是低电平。），这种浮动也被称为电子噪声。电子噪声被随即的解释为0或者1。</p>

<p>上拉电阻或下拉电阻可用来保证状态确定为高或低。</p>

<h4>下拉电阻</h4>

<p>如左图：</p>

<p><img class="lazy no-shadow" data-original="/photos/dianzu.png" width="640" height="200" title="下拉电阻和上拉电阻" alt="下拉电阻和上拉电阻"></p>

<p>如果按钮被按下，电流以电阻最小的路径在5V 端与输入引脚之间流过。 当按钮没有被按下
时，输入引脚通过100KΩ 电阻接地。如果没有这个电阻，当按钮没有被按下时，这个引脚将
不连接任何东西，因此它的电压是在 0V 和 5V 之间浮动。在这个电路中，当按钮没有被按
下输入将总是接地的，或者是0V，当按钮被按下时它将指向5V端。</p>

<h4>上拉电阻</h4>

<p>如右图：</p>

<p><img class="lazy no-shadow" data-original="/photos/dianzu.png" width="640" height="200" title="下拉电阻和上拉电阻" alt="下拉电阻和上拉电阻"></p>

<p>交换下拉电阻和开关的位置，现在电阻变成了上拉电阻。当按钮没有被按下时，输入引脚通
过上拉电阻接到5V端，所以引脚上总是高电平。当按钮被按下时，通过限流电阻的路径引脚
接地，所以引脚被拉向地或者低电平状态。如果没有5V端和地之间的电阻，电路将被短路，
这将损坏电路或电源。上拉电阻在数字电路中应用更广泛。</p>

<p>上拉电阻在数字电路中经常用来保证输入保持高电平。</p>

<h4>Arduino 内部的上拉电阻</h4>

<p> Arduino 内部包含了上拉电阻。它连接在引脚上，阻值为20KΩ，使用时需要通过软件激活。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pinMode</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'><span class="n">digitalWrite</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>同理，当一个输出脚为 HIGH 时，转换这个引脚到 INPUT 模式，那么内部上拉电阻将激活。</p>

<h2>电位计与从模拟引脚读值</h2>

<h4>电位计</h4>

<p>电位计就是一个可调节电阻，调解范围从0到一个设定的值。电位计有三个引脚。若只连接
两个引脚，电位计可变为一个可变电阻。通过连接三个引脚，并为其提供电压，它将称为
一个分压器。</p>

<p>电位计提供了一种在0和设定的最大值之间调整数值的方法。</p>

<h4>模拟引脚读值</h4>

<p>Arduino有6个模拟输入/输出引脚，每个引脚带有一个10位模/数转换器。这意味着模拟引脚
能够读取0V 到 5V之间的电压，用0到1023之间的正数代表0V 到 5V之间的电压。每个分度
表示 5V / 1024 电压，即每个分度是4.9mV。</p>

<p>通过直接读取电位计引脚数值到ledDelay这个变量中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">byte</span> <span class="n">potPin</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 电位计连接到的模拟引脚</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ledDelay</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">potPin</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：模拟引脚不需要像数字引脚一样设置输入或输出模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 学习笔记——LED 闪烁实验中隐含的简单原理]]></title>
    <link href="http://yuez.me/arduino-xue-xi-bi-ji-led-shan-shuo-shi-yan-zhong-yin-han-de-jian-dan-yuan-li/"/>
    <updated>2015-05-27T08:52:24+08:00</updated>
    <id>http://yuez.me/arduino-xue-xi-bi-ji-led-shan-shuo-shi-yan-zhong-yin-han-de-jian-dan-yuan-li</id>
    <content type="html"><![CDATA[<p>我是软件出身，但是许久以前便对硬件充满了兴趣，终于在最近买了一套 Arduino 基础开
发套件，希望能在硬件上学习一些知识。</p>

<p>几乎所有单片机学习的第一个实验都是<code>blink</code>，在这个小小的实验中也蕴含着一些我不知
道的电子电路知识，所以记录下在这个实验中所学习的知识，方便回顾整理。</p>

<h2>代码回顾</h2>

<figure class='code'><figcaption><span>blink.ino</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">ledPin</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">ledPin</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledPin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">ledPin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一段类似 C 的 Arduino 代码对于软件出身的我来说并不难理解。但是，这里要注意的是
Arduino 程序必须包含 <code>setup()</code> 和 <code>loop()</code> 两个函数，否则它将不能工作。顾名思义，
前者只在程序开始时运行一次，一般做初始化用，如设置引脚形式，设置波特率等等。后者
则是在程序中循环执行的，是主要的过程函数。</p>

<p>在这段代码的 <code>setup()</code> 函数中，只执行了一句代码：<code>pinMode(ledPin, OUTPUT)</code>，它告
诉 Arduino 设置引脚的模式为输出模式。由此易知，对应的应该还有一个 <code>INPUT</code> 的输入
模式。</p>

<p>在 <code>loop()</code> 函数中，让 LED 以一秒的频率闪烁，主要依靠 <code>digitalWrite</code> 和 <code>delay</code>
函数。其中，<code>digitalWrite(ledPin, HIGH)</code> 告诉数字引脚打开电源，<code>delay(1000)</code>让程
序暂停1秒，而 <code>digitalWrite(ledPin, LOW)</code> 则要求数字引脚关闭电源。</p>

<h2>硬件回顾</h2>

<p>在 LED 闪烁实验中，用到的硬件有：</p>

<ul>
<li>面包板</li>
<li>5mm LED</li>
<li>220Ω 电阻（或者其他适合你 LED 的数值）</li>
<li>跳线（也称面包线）</li>
</ul>


<h4>面包板</h4>

<p>面包板是一个可重复使用的非焊接单元，用于制作一个电子线路原型或者线路设计实验。这
个板在一个栅格中有一系列的孔，在板子背面，这些孔通过两条导电金属条相连。 如图：</p>

<p><img class="lazy no-shadow" data-original="/photos/breadboard.jpg" width="640" height="200" title="面包板排列" alt="面包板排列"></p>

<h4>电阻</h4>

<p>电阻会对电流产生一定的阻力，引起它两端的电压下降。在我的 LED 闪烁实验里面，数字
引脚输出5V、40mA 直流电，而我的 LED 需要的是2V、35mA 电流，因此我需要一个电阻降
 低电压和电流。</p>

<p> 计算需要的电阻阻值的公式是：</p>

<p>R = (V<sub>S</sub> - V<sub>L</sub>) / I</p>

<p>就是用电源电压减去 LED 电压除以 LED 电流。</p>

<p>那么怎样找到所需要的阻值的电阻呢？电阻使用色环代码表示电阻阻值的大小。</p>

<table>
<thead>
<tr>
<th>颜色 </th>
<th> 1st </th>
<th> 2nd </th>
<th> 3rd(幂)         </th>
<th> 4th(误差)</th>
</tr>
</thead>
<tbody>
<tr>
<td>黑色 </td>
<td>  0  </td>
<td>  0  </td>
<td> x10<sup>0</sup> </td>
<td></td>
</tr>
<tr>
<td>棕色 </td>
<td>  1  </td>
<td>  1  </td>
<td> x10<sup>1</sup> </td>
<td> +/- 1%</td>
</tr>
<tr>
<td>红色 </td>
<td>  2  </td>
<td>  2  </td>
<td> x10<sup>2</sup> </td>
<td> +/- 2%</td>
</tr>
<tr>
<td>橘黄 </td>
<td>  3  </td>
<td>  3  </td>
<td> x10<sup>3</sup> </td>
<td></td>
</tr>
<tr>
<td>黄色 </td>
<td>  4  </td>
<td>  4  </td>
<td> x10<sup>4</sup> </td>
<td></td>
</tr>
<tr>
<td>绿色 </td>
<td>  5  </td>
<td>  5  </td>
<td> x10<sup>5</sup> </td>
<td> +/- 0.5%</td>
</tr>
<tr>
<td>蓝色 </td>
<td>  6  </td>
<td>  6  </td>
<td> x10<sup>6</sup> </td>
<td> +/- 0.25%</td>
</tr>
<tr>
<td>紫色 </td>
<td>  7  </td>
<td>  7  </td>
<td> x10<sup>7</sup> </td>
<td> +/- 0.1%</td>
</tr>
<tr>
<td>灰色 </td>
<td>  8  </td>
<td>  8  </td>
<td> x10<sup>8</sup> </td>
<td> +/- 0.05%</td>
</tr>
<tr>
<td>白色 </td>
<td>  9  </td>
<td>  9  </td>
<td> x10<sup>9</sup> </td>
<td></td>
</tr>
<tr>
<td>金色 </td>
<td>     </td>
<td>     </td>
<td> x10<sup>-1</sup></td>
<td> +/- 5%</td>
</tr>
<tr>
<td>银色 </td>
<td>     </td>
<td>     </td>
<td> x10<sup>-2</sup></td>
<td> +/- 10%</td>
</tr>
<tr>
<td>无   </td>
<td>     </td>
<td>     </td>
<td>                 </td>
<td> +/- 20%</td>
</tr>
</tbody>
</table>


<h4>LED</h4>

<p>LED 是一个标准的发光二极管。二极管是一种器件，值允许电流从一个方向流进。二极管用
来防止在电路中意外地将电流和地连接以至于损坏其他元件。</p>

<p>LED 的引脚的长度不同，长的一边为正极，需要连接电源；短的一边为负极，需要接地。给
LED 串联一个电阻是必要的，以确保提供给 LED 正确的电流。</p>

<h2>总结</h2>

<p>实验虽然简单，确也有许多我不曾知道的知识点。希望自己能坚持下去，完成对于 Arduino
的学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 基础教程]]></title>
    <link href="http://yuez.me/redis-ji-chu-jiao-cheng/"/>
    <updated>2015-05-26T10:46:25+08:00</updated>
    <id>http://yuez.me/redis-ji-chu-jiao-cheng</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Redis 是一个键值存储仓库，经常被称为 NoSQL 数据库。键值存储仓库的本质是有能力按
照一个键映射一个值的方式存储一些数据，然后你可以只通过这个键寻找到你之前通过这个
键存储的值。我们可以使用命令<code>SET</code>将值『fido』存储在键『server:name』中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SET</span> <span class="ss">server</span><span class="p">:</span><span class="nb">name</span> <span class="s2">&quot;fido&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis 将会把我们的数据永久存储。于是，我们可以假设这样询问 Redis 数据库：键 server:name
对应的值是什么？ 然后，Redis 会返回『fido』。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GET</span> <span class="ss">server</span><span class="p">:</span><span class="nb">name</span> <span class="c1"># =&gt; &quot;fido&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面列出了一些其他常用的命令：</p>

<ul>
<li><code>DEL</code>   根据给定的键，删除相应的键值关系</li>
<li><code>SETNX</code> 当且仅当给定键没有指定值的时候，才设定相应的键值对</li>
<li><code>INCR</code>  将数字递增</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SET</span>  <span class="n">connection</span> <span class="mi">10</span>
</span><span class='line'><span class="no">INCR</span> <span class="n">connection</span> <span class="c1"># =&gt; 11</span>
</span><span class='line'><span class="no">INCR</span> <span class="n">connection</span> <span class="c1"># =&gt; 12</span>
</span><span class='line'><span class="no">DEL</span>  <span class="n">connection</span>
</span><span class='line'><span class="no">INCR</span> <span class="n">connection</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>递增</h2>

<p>对于 <code>INCR</code> 命令，我们有一些特别的事情要说明。Redis 为什么会提供一个自己很简单就
能实现的功能呢？就像下面这么简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="no">GET</span> <span class="n">count</span>
</span><span class='line'><span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="no">SET</span> <span class="n">count</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而问题是，这种递增操作只能用于单客户端上。看一下，如果两个客户端同时执行这样
的操作会发生什么：</p>

<ol>
<li>客户端 A 读取值 x 为10</li>
<li>客户端 B 读取值 x 为10</li>
<li>客户端 A 写 x 的值为11</li>
<li>客户端 B 写 x 的值为11</li>
</ol>


<p>我们希望 x 的值为12，但是真实的 x 的值仅仅是11，这是因为你自己定义的递增操作不是
一个原子性操作。使用 Redis 的 <code>INCR</code> 命令可以防止这样的事情发生， 因为它是一个原
子性操作。Redis 为许多不同类型的数据提供了类似的原子性操作。</p>

<h2>过期</h2>

<p>Redis 可以使用命令 <code>EXPIRE</code> 和 <code>TTL</code>，能让一个键值对只存在于指定的时间段内。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SET</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="s2">&quot;Redis Demo&quot;</span>
</span><span class='line'><span class="no">EXPIRE</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="mi">120</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会导致键 resource:lock  会在120s 后被删除，你可以使用 <code>TTL</code> 去查看一个键还能存
在多少时间：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">TTL</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="c1"># =&gt; 120</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># after 122s later</span>
</span><span class='line'><span class="no">TTL</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="c1"># =&gt; -2</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 -2 是指 resource:lock 已经不存在了，如果返回值是 -1 说明这个键永远不会过
期。注意：当你使用 <code>SET</code> 重新设置一个键， 它对应的 <code>TTL</code> 就会被重置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SET</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="s2">&quot;Redis demo 1&quot;</span>
</span><span class='line'><span class="no">EXPIRE</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="mi">120</span>
</span><span class='line'><span class="no">TTL</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="c1"># =&gt; 119</span>
</span><span class='line'><span class="no">SET</span> <span class="n">resoource</span><span class="o">.</span><span class="n">lock</span> <span class="s2">&quot;Redis demo 2&quot;</span>
</span><span class='line'><span class="no">TTL</span> <span class="ss">resource</span><span class="p">:</span><span class="n">lock</span> <span class="c1"># =&gt; -1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>列表</h2>

<p>此外，Redis 也支持一些更复杂的数据结构。我们第一个会看的是列表。一个列表是一系列
有序的值。与数组有关的一系列操作是：<code>RPUSH</code>, <code>LPUSH</code>, <code>LLEN</code>, <code>LRANGE</code>, <code>LPOP</code>和
<code>RPOP</code>。列表和普通的值一样，可以被直接使用。</p>

<ul>
<li><code>RPUSH</code> 将值添加到列表的末尾</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RPUSH</span> <span class="n">friends</span> <span class="s2">&quot;Alice&quot;</span>
</span><span class='line'><span class="no">RPUSH</span> <span class="n">friedns</span> <span class="s2">&quot;Joe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>LPUSH</code> 将值添加到列表的开始</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">LPUSH</span> <span class="n">friends</span> <span class="s2">&quot;Sam&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>LRANGE</code>是从列表中去一个指定范围的子集。它通过你想取的范围的第一个元素的下标和
最后一个元素的下标作为参数。将 -1 作为参数意味着取值到列表的最后。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">LRANGE</span> <span class="n">friends</span> <span class="mi">0</span> <span class="o">-</span><span class="mi">1</span> <span class="c1"># =&gt; 1) &quot;Sam&quot;, 2) &quot;Alice&quot;, 3) &quot;Joe&quot;</span>
</span><span class='line'><span class="no">LRANGE</span> <span class="n">friends</span> <span class="mi">0</span>  <span class="mi">1</span> <span class="c1"># =&gt; 1) &quot;Sam&quot;, 2) &quot;Alice&quot;</span>
</span><span class='line'><span class="no">LRANGE</span> <span class="n">friends</span> <span class="mi">1</span>  <span class="mi">2</span> <span class="c1"># =&gt; 1) &quot;Alice&quot;, 2) &quot;Joe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>LLEN</code> 返回指定列表的长度</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">LLEN</span> <span class="n">friends</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>LPOP</code> 从列表中删除第一个元素，并将它作为返回值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">LPOP</span> <span class="n">friends</span> <span class="c1"># =&gt; &quot;Sam&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>RPOP</code> 从列表中删除最后一个元素，并将它作为返回值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RPOP</span> <span class="n">friends</span> <span class="c1"># =&gt; &quot;Joe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意看现在的列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">LLEN</span> <span class="n">friends</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="no">LRANGE</span> <span class="n">friends</span> <span class="mi">0</span> <span class="o">-</span><span class="mi">1</span> <span class="c1"># =&gt; 1) &quot;Alice&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>集合</h2>

<p>接下来我们要看的数据结构是集合。集合和列表类似，但是集合中元素是无序且不能重复的。
和集合有关的一些重要的命令是：<code>SADD</code>, <code>SREM</code>, <code>SISMEMBER</code>, <code>SMEMBERS</code> 和 <code>SUNION</code>.</p>

<ul>
<li><code>SADD</code> 将给定的值添加到集合中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SADD</span> <span class="n">superpowers</span> <span class="s2">&quot;flight&quot;</span>
</span><span class='line'><span class="no">SADD</span> <span class="n">superpowers</span> <span class="s2">&quot;x-ray vision&quot;</span>
</span><span class='line'><span class="no">SADD</span> <span class="n">superpowers</span> <span class="s2">&quot;reflexes&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>SREM</code> 从集合中移除指定的值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SREM</span> <span class="n">superpowers</span> <span class="s2">&quot;reflexes&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>SISMEMBER</code> 检查一个值是否在集合中，返回0不在，返回1在。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SISMEMBER</span> <span class="n">superpowers</span> <span class="s2">&quot;flight&quot;</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="no">SISMEMBER</span> <span class="n">superpowers</span> <span class="s2">&quot;reflexes&quot;</span> <span class="c1"># =&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>SMEMBERS</code> 返回集合中所有的元素</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SMEMBERS</span> <span class="n">superpowers</span> <span class="c1"># =&gt; 1) &quot;flight&quot;, 2) &quot;x-ray vision&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>SUNION</code> 合并两个或者更多个集合，并且将所有的元素返回。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SADD</span> <span class="n">birdpowers</span> <span class="s2">&quot;pecking&quot;</span>
</span><span class='line'><span class="no">SADD</span> <span class="n">birdpowers</span> <span class="s2">&quot;flight&quot;</span>
</span><span class='line'><span class="no">SUNION</span> <span class="n">superpowers</span> <span class="n">birdpowers</span> <span class="c1"># =&gt; 1) &quot;pecking&quot;, 2) &quot;flight&quot;, 3) &quot;x-ray vision&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可排序集合</h2>

<p>集合是一个非常有用的数据类型，但是因为它是无序的，所以因此会导致很多的问题。因此
Redis 1.2 开始添加了可排序集合。可排序集合和标准的集合类似，只是添加了一个分数和
集合中的元素相关联。这个分数用来给元素排序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ZADD</span> <span class="n">hackers</span> <span class="mi">1940</span> <span class="s2">&quot;Alan Kay&quot;</span>
</span><span class='line'><span class="no">ZADD</span> <span class="n">hackers</span> <span class="mi">1906</span> <span class="s2">&quot;Grace Hopper&quot;</span>
</span><span class='line'><span class="no">ZADD</span> <span class="n">hackers</span> <span class="mi">1954</span> <span class="s2">&quot;Wang Zhi He&quot;</span>
</span><span class='line'><span class="no">ZADD</span> <span class="n">hackers</span> <span class="mi">1988</span> <span class="s2">&quot;Li Feng&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">ZRANGE</span> <span class="n">hackers</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="c1"># =&gt; 1) &quot;Alan Kay&quot;, 2) &quot;Grace Hopper&quot;, 3) &quot;Wang Zhi He&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>哈希表</h2>

<p>除了字符串、列表、集合之外，Redis 还能储存一种类型的数据————哈希表。哈希表将两个
字符串类型的值映射在一起，它是最好的用来表示对象的数据结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">HSET</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="nb">name</span> <span class="s2">&quot;John Smith&quot;</span>
</span><span class='line'><span class="no">HSET</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">email</span> <span class="s2">&quot;john.smith@google.com&quot;</span>
</span><span class='line'><span class="no">HSET</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">password</span> <span class="s2">&quot;public&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用命令 <code>HGETALL</code> 获得保存的数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">HGETALL</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以一起行设置多个域</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">HMSET</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1001</span> <span class="nb">name</span> <span class="s2">&quot;Zack Lee&quot;</span> <span class="n">email</span> <span class="s2">&quot;zack.lee@facebook.com&quot;</span> <span class="n">password</span> <span class="s2">&quot;public&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以只获取特定域的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">HGET</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1001</span> <span class="nb">name</span> <span class="c1"># =&gt; &quot;Zack Lee&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>数字类型的值在哈希表里面有一些方便的原子性的递增方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">HSET</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">visits</span> <span class="mi">10</span>
</span><span class='line'><span class="no">HINCRBY</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">visits</span> <span class="mi">1</span>  <span class="c1"># =&gt; 11</span>
</span><span class='line'><span class="no">HINCRBY</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">visits</span> <span class="mi">10</span> <span class="c1"># =&gt; 21</span>
</span><span class='line'><span class="no">HDEL</span>    <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">visits</span>
</span><span class='line'><span class="no">HINCRBY</span> <span class="ss">user</span><span class="p">:</span><span class="mi">1000</span> <span class="n">visits</span> <span class="mi">1</span>  <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于哈希表的完整命令列表，请查看<a href="http://redis.io/commands#hash">官方文档</a></p>

<p>更多关于 Redis 文档:</p>

<ul>
<li><a href="http://redis.io/documentation">Redis官方文档</a></li>
<li><a href="http://redis.io/commands">命令参考</a></li>
<li><a href="http://redis.io/topics/data-types-intro">Redis 中数据类型介绍</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将你的Vim 打造成轻巧强大的IDE]]></title>
    <link href="http://yuez.me/jiang-ni-de-vim-da-zao-cheng-qing-qiao-qiang-da-de-ide/"/>
    <updated>2015-04-20T21:51:01+08:00</updated>
    <id>http://yuez.me/jiang-ni-de-vim-da-zao-cheng-qing-qiao-qiang-da-de-ide</id>
    <content type="html"><![CDATA[<p>Vim和Emacs一个称为神之编辑器一个被称为编辑器之神，固然很是夸张，但也足以说明这两
款软件的优秀和在程序员界的地位。但是它们都已漫长的学习曲线让人望而生畏，阻止了大
多数人进入。作为一名几乎完全使用Vim写各种代码、文档的人，我想把我自己平时使用的
插件和配置整理下来，方便自己的总结和归纳，如果能有幸帮助到一些想学习Vim但是又不知
道如何入门的人来说，那就再荣幸不过了<i class="fa fa fa-heart"></i>。</p>

<p>在下面的内容中，我会介绍我使用的插件、Vim的配置，最后如果你觉得这些配置手动太麻烦
的话，我推荐你看我的另一篇文章（<a href="http://yuez.me/cong-ling-da-jian-he-pei-zhi-osxkai-fa-huan-jing/">从零搭建和配置OSX开发环境</a>），
在那篇文章的末尾，我给出了一个<strong>自动化配置和管理Vim的方法</strong>。</p>

<p>先贴一张我的Vim的截图：</p>

<p><img class="lazy no-shadow" data-original="/photos/vim-ide.png" width="600" height="240" title="vim as ide" alt="vim as ide"></p>

<h2>你看的到的插件</h2>

<p>从上面那种截图中肉眼能看到的插件说起，把整个界面按照左窗口、主窗口、右窗口和下窗
口命名，依次介绍出现在这个窗口中的主要插件。</p>

<h4>主窗口</h4>

<p>作为一款主要用于书写代码的文本编辑器，一个足够舒服、靓丽的配色当然是首要考虑的。
我使用的配色主题是<code>molokai</code>（<a href="https://github.com/tomasr/molokai">官方地址</a>），在
你安装好了这个插件之后，你需要下面几行配置应用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Switch syntax highlighting on, when the terminal has colors</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">t_Co</span> <span class="p">&gt;</span> <span class="m">2</span> <span class="p">||</span> has<span class="p">(</span><span class="s2">&quot;gui_running&quot;</span><span class="p">))</span> &amp;&amp; <span class="p">!</span>exists<span class="p">(</span><span class="s2">&quot;syntax_on&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">syntax</span> <span class="k">on</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Javascript syntax hightlight</span>
</span><span class='line'><span class="nb">syntax</span> enable
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Set syntax highlighting for specific file types</span>
</span><span class='line'><span class="k">autocmd</span> <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> Appraisals <span class="k">set</span> <span class="k">filetype</span><span class="p">=</span><span class="k">ruby</span>
</span><span class='line'><span class="k">autocmd</span> <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> *.md <span class="k">set</span> <span class="k">filetype</span><span class="p">=</span>markdown
</span><span class='line'><span class="k">autocmd</span> <span class="nb">Syntax</span> javascript <span class="k">set</span> <span class="nb">syntax</span><span class="p">=</span>jquery
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Color scheme</span>
</span><span class='line'><span class="k">colorscheme</span> molokai
</span><span class='line'><span class="nb">highlight</span> NonText guibg<span class="p">=</span><span class="mh">#060606</span>
</span><span class='line'><span class="nb">highlight</span> Folded  guibg<span class="p">=</span>#<span class="m">0</span>A<span class="m">0</span>A<span class="m">0</span>A guifg<span class="p">=</span>#<span class="m">9090</span>D<span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个推荐的vim主题是<code>solarized</code>(<a href="https://github.com/altercation/vim-colors-solarized">官方地址</a>)。</p>

<p>在选定了一个适合自己的主题之后，就需要一些配置去解决排版的问题，比如字符编码和缩
进等问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Backspace deletes like most programs in insert mode</span>
</span><span class='line'><span class="k">set</span> <span class="nb">backspace</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="c">&quot; Show the cursor position all the time</span>
</span><span class='line'><span class="k">set</span> <span class="nb">ruler</span>
</span><span class='line'><span class="c">&quot; Display incomplete commands</span>
</span><span class='line'><span class="k">set</span> <span class="nb">showcmd</span>
</span><span class='line'><span class="c">&quot; Set fileencodings</span>
</span><span class='line'><span class="k">set</span> <span class="nb">fileencodings</span><span class="p">=</span>utf<span class="m">-8</span><span class="p">,</span>bg18030<span class="p">,</span>gbk<span class="p">,</span>big5
</span><span class='line'>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Softtabs, 2 spaces</span>
</span><span class='line'><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftround</span>
</span><span class='line'><span class="k">set</span> <span class="nb">expandtab</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Display extra whitespace</span>
</span><span class='line'><span class="k">set</span> <span class="nb">list</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:»·<span class="p">,</span>trail:·
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Make it obvious where 80 characters is</span>
</span><span class='line'><span class="k">set</span> <span class="nb">textwidth</span><span class="p">=</span><span class="m">80</span>
</span><span class='line'><span class="k">set</span> <span class="nb">colorcolumn</span><span class="p">=+</span><span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Numbers</span>
</span><span class='line'><span class="k">set</span> <span class="k">number</span>
</span><span class='line'><span class="k">set</span> <span class="nb">numberwidth</span><span class="p">=</span><span class="m">5</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">matchpairs</span><span class="p">+=&lt;</span>:<span class="p">&gt;</span>
</span><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>在第68行，水平和垂直方向分别有一条高亮条，这是用来表示我当 前光标所处于的行和列
用的。实现它，只需要几行简单的配置就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Highlight current line</span>
</span><span class='line'><span class="k">au</span> <span class="nb">WinLeave</span> * <span class="k">set</span> <span class="nb">nocursorline</span> <span class="nb">nocursorcolumn</span>
</span><span class='line'><span class="k">au</span> <span class="nb">WinEnter</span> * <span class="k">set</span> <span class="nb">cursorline</span> <span class="nb">cursorcolumn</span>
</span><span class='line'><span class="k">set</span> <span class="nb">cursorline</span> <span class="nb">cursorcolumn</span>
</span></code></pre></td></tr></table></div></figure>


<h5>关于代码补全</h5>

<p>有些人可能已经发现了，在我的主窗口中没有演示代码补全的功能，我需要对此做一个说明。
我本人不喜欢过于强大的代码补全，所以默认的对于我来说已经完全足够了，如果你需要使
用更强大的代码补全，我推荐你使用<code>YouCompleteMe</code>（<a href="https://github.com/Valloric/YouCompleteMe">官方地址</a>）。</p>

<p><img class="lazy no-shadow" data-original="/photos/you-complete-me.gif" width="600" height="240" title="YouCompleteMe" alt="YouCompleteMe"></p>

<h4>左窗口</h4>

<p>左窗口是一个用于浏览目录结构的插件<code>nerdtree</code>（<a href="https://github.com/scrooloose/nerdtree">官方地址</a>）。
同样一些简单的配置之后，它便能为你提供一个方便够用的功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; NERD tree</span>
</span><span class='line'><span class="k">let</span> NERDChristmasTree<span class="p">=</span><span class="m">0</span>
</span><span class='line'><span class="k">let</span> NERDTreeWinSize<span class="p">=</span><span class="m">35</span>
</span><span class='line'><span class="k">let</span> NERDTreeChDirMode<span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">let</span> NERDTreeIgnore<span class="p">=</span>[<span class="s1">&#39;\~$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.pyc$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.swp$&#39;</span>]
</span><span class='line'><span class="k">let</span> NERDTreeShowBookmarks<span class="p">=</span><span class="m">1</span>
</span><span class='line'><span class="k">let</span> NERDTreeWinPos<span class="p">=</span><span class="s2">&quot;left&quot;</span>
</span><span class='line'><span class="c">&quot; Automatically open a NERDTree if no files where specified</span>
</span><span class='line'><span class="k">autocmd</span> vimenter * <span class="k">if</span> <span class="p">!</span>argc<span class="p">()</span> <span class="p">|</span> NERDTree <span class="p">|</span> <span class="k">endif</span>
</span><span class='line'><span class="c">&quot; Close vim if the only window left open is a NERDTree</span>
</span><span class='line'><span class="k">autocmd</span> bufenter * <span class="k">if</span> <span class="p">(</span>winnr<span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="p">)</span> <span class="p">==</span> <span class="m">1</span> &amp;&amp; exists<span class="p">(</span><span class="s2">&quot;b:NERDTreeType&quot;</span><span class="p">)</span> &amp;&amp; <span class="k">b</span>:NERDTreeType <span class="p">==</span> <span class="s2">&quot;primary&quot;</span><span class="p">)</span> <span class="p">|</span> <span class="k">q</span> <span class="p">|</span> <span class="k">endif</span>
</span><span class='line'><span class="c">&quot; Open a NERDTree</span>
</span><span class='line'>nmap <span class="p">&lt;</span>F5<span class="p">&gt;</span> :NERDTreeToggle<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>右窗口</h4>

<p>在我的截图中，右窗口陈列出了我当前打开的rb文件中申明的类、变量及方法等等。这是一
款名叫<code>tagbar</code>的插件，它为我们提供了一个简单的方式去浏览当前文件的结构，并且支持
在各个标签之间快捷的跳转。同理，安装之后，需要一些配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Tagbar</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:tagbar_width<span class="p">=</span><span class="m">35</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:tagbar_autofocus<span class="p">=</span><span class="m">1</span>
</span><span class='line'>nmap <span class="p">&lt;</span>F6<span class="p">&gt;</span> :TagbarToggle<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你发现默认的<code>Tagbar</code>不能支持你的语言，比如Css, Clojure, Markdown等等，你可以
参照<a href="https://github.com/majutsushi/tagbar/wiki">这篇文章</a>为它提供额外的支持。</p>

<h4>下窗口</h4>

<p>下窗口包含了两个部分：一个是用于全局搜索的窗口和一个状态条。</p>

<p>全局搜索是一个基于文件名的搜索功能，可以快速定位一个文件。这是<code>ctrlp</code>这个插件提
供的功能。下面是<code>ctrlp</code>的一些配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; ctrap</span>
</span><span class='line'><span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*<span class="sr">/tmp/</span>*<span class="p">,</span>*.<span class="k">so</span><span class="p">,</span>*.swp<span class="p">,</span>*.zip<span class="p">,</span>*.png<span class="p">,</span>*.jpg<span class="p">,</span>*.jpeg<span class="p">,</span>*.gif <span class="c">&quot; MacOSX/Linux</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:ctrlp_custom_ignore <span class="p">=</span> <span class="s1">&#39;\v[\/]\.(git|hg|svn)$&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ctrlp</code>默认会使用<code>grep</code>进行搜索，效率低且慢。所以，我使用了<code>ag</code>去替换默认的搜索
功能。ag是一款轻量级的搜索工具，速度非常快。为了集成ag，需要添加下列配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> executable<span class="p">(</span><span class="s1">&#39;ag&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">  &quot; Use Ag over Grep</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">grepprg</span><span class="p">=</span>ag\ <span class="p">--</span>nogroup\ <span class="p">--</span>nocolor
</span><span class='line'><span class="c">  &quot; Use ag in CtrlP for listing files.</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:ctrlp_user_command <span class="p">=</span> <span class="s1">&#39;ag %s -l --nocolor -g &quot;&quot;&#39;</span>
</span><span class='line'><span class="c">  &quot; Ag is fast enough that CtrlP doesn&#39;t need to cache</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:ctrlp_use_caching <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面状态条中会依次显示：当前模式、Git分支、文件路径、文件是否保存以及当前所载行和
列的信息。这是通过<code>vim-powerline</code>来实现的。其中显示Git信息需要配合<code>vim-fugitive</code>
插件一些使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span> <span class="c">&quot; Always display the status line</span>
</span><span class='line'><span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%{fugitive#<span class="nb">statusline</span><span class="p">()</span>} <span class="c">&quot;  Git Hotness</span>
</span></code></pre></td></tr></table></div></figure>


<h4>小结</h4>

<p>通过以上的配置，你就可以拥有一些如第一张图所示的那样，看起来还不错的编辑器。当然，
Vim之所以如此倍受推崇，只是依靠这些还是远远不够的。接下来，我要介绍一些看不见的插
件来实实在在的提升Vim体验。</p>

<h2>看不见的实用插件</h2>

<h4>现代化的插件管理</h4>

<p>在我的另一篇文章中（<a href="http://yuez.me/cong-ling-da-jian-he-pei-zhi-osxkai-fa-huan-jing/">从零搭建和配置OSX开发环境</a>）
，我已经详细介绍过<code>Vundle</code>这个管理Vim插件的一个软件，这里不做过多介绍。</p>

<h4>在Vim中执行你想要运行的命令</h4>

<p><code>vim-run-interactive</code>让你可以在Vim中执行几乎任何你想要在命令行中执行的命令。举例
来说，假设你有条<code>git update</code>的自定义命令，你可以通过<code>:RunInInteractiveShell git
update</code>来执行它，而不需要退出Vim。添加一条配置，可以简化这个步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Run commands that require an interactive shell</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">r</span> :RunInInteractiveShell<span class="p">&lt;</span>space<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一来，你可以通过<code>&lt;Leader&gt; + r + 命令</code>键来激活执行命令。如果你不知道什么是<code>Leader</code>
键，你可以去百度或者Google一下。</p>

<h4>Vim的语法检查</h4>

<p>Vim中有个很强大的语法检查插件，它支持几乎所有常用的语言的语法检测[<code>syntastic</code>(<a href="https://github.com/scrooloose/syntastic">https://github.com/scrooloose/syntastic</a>)]。
附上一张来自官方的截图：</p>

<p><img class="lazy no-shadow" data-original="/photos/syntastic.png" width="600" height="240" title="syntastic plugin" alt="syntastic plugin"></p>

<p>为了让它更好的工作，同样需要一些配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; configure syntastic syntax checking to check on open as well as save</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_check_on_open<span class="p">=</span><span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_html_tidy_ignore_errors<span class="p">=</span>[<span class="s2">&quot; proprietary attribute \&quot;ng-&quot;</span>]
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_always_populate_loc_list <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_auto_loc_list <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_check_on_wq <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%#warningmsg#
</span><span class='line'><span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%{SyntasticStatuslineFlag<span class="p">()</span>}
</span><span class='line'><span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%*
</span></code></pre></td></tr></table></div></figure>


<h4>Rails集成开发套件</h4>

<p>我是一名Ruby的爱好者，所以Vim中少不了针对Ruby的一系列插件。我作为一名Web开发者，
Rails这个大名鼎鼎的框架自然也是有所涉猎。所以在我的Vim中有着针对它们开发的一套插
件。</p>

<p>插件列表：</p>

<ul>
<li><strong><a href="https://github.com/vim-ruby/vim-ruby">ruby-vim</a></strong>：在快速的在module, class,
method中跳跃。</li>
<li><strong><a href="https://github.com/tpope/vim-bundler">vim-bundler</a></strong>：在Vim中集成<code>Bundler</code>。</li>
<li><strong><a href="https://github.com/tpope/vim-endwise">vim-endwise</a></strong>：自动补全<code>end</code>关键字。</li>
<li><strong><a href="https://github.com/tpope/vim-rails">vim-rails</a></strong>：它的功能很多，可以说是用
Vim开发Rails不可缺少的一个插件。更详细的信息，可以前往它的官方网站获取。</li>
<li><strong><a href="https://github.com/thoughtbot/vim-rspec">vim-rspec</a></strong>：在Vim中执行Rspec测试。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Cucumber navigation commands</span>
</span><span class='line'><span class="k">autocmd</span> <span class="nb">User</span> Rails Rnavcommand step features<span class="sr">/step_definitions -glob=**/</span>* <span class="p">-</span>suffix<span class="p">=</span>_steps.rb
</span><span class='line'><span class="k">autocmd</span> <span class="nb">User</span> Rails Rnavcommand config config <span class="p">-</span>glob<span class="p">=</span>**/* <span class="p">-</span>suffix<span class="p">=</span>.rb <span class="p">-</span>default<span class="p">=</span>routes
</span><span class='line'>
</span><span class='line'><span class="c">&quot; RSpec.vim mappings</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">t</span> :<span class="k">call</span> RunCurrentSpecFile<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">s</span> :<span class="k">call</span> RunNearestSpec<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">l</span> :<span class="k">call</span> RunLastSpec<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">a</span> :<span class="k">call</span> RunAllSpecs<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>更多好用的工具</h4>

<p>还有很多好用的插件，如果每个都一一说明，那么篇幅再长一倍怕也是不够。所以，我这里
就把一些好用的插件列出来，有兴趣的可以自己看看。</p>

<ul>
<li><a href="https://github.com/danro/rename.vim">rename.vim</a>：在Vim中为文件重命名。</li>
<li><a href="https://github.com/kchmck/vim-coffee-script">vim-coffee-script</a>：在Vim中舒心
的编写、编译Coffeescript。</li>
<li><a href="https://github.com/pbrisbin/vim-mkdir">vim-mkdir</a>：当你在Vim中新建文件的时候，
自动帮你创建不存在的目录。</li>
<li><a href="https://github.com/tpope/vim-surround">vim-surround</a>：快速的删除、修改和添加
括号、引号、XML标签等等。</li>
<li><a href="https://github.com/tmhedberg/matchit">matchit</a>：用<code>%</code>去在两个对应的字符间跳转。</li>
<li><a href="https://github.com/vim-scripts/tComment">tComment</a>：快速注释、反注释代码。</li>
<li><a href="https://github.com/mattn/emmet-vim">emmet-vim</a>：<code>Emmet</code>的Vim版。</li>
<li><a href="https://github.com/godlygeek/tabular">tabular</a>：快速对齐。</li>
<li><a href="https://github.com/msanders/snipmate.vim">snipmate.vim</a>：快速的代码片段。</li>
<li><a href="https://github.com/Lokaltog/vim-easymotion">vim-easymotion</a>：在文件中快速定位。</li>
<li><a href="https://github.com/suan/vim-instant-markdown">vim-instant-markdown</a>：Vim中对
Markdown文档的实时预览。</li>
</ul>


<h2>备注</h2>

<p>有更多的一些插件我没有都列出来，它们一般用于特定语法的开发，不一定适合所有人。你
可以参考<a href="http://yuez.me/cong-ling-da-jian-he-pei-zhi-osxkai-fa-huan-jing/">从零搭建和配置OSX开发环境</a>
这篇文章，自动管理、配置你的Vim环境。</p>

<p>在上文中，我有一些遗漏的或者错误的地方，希望朋友发现后可以在下方留言指正。如果你
有一些更好的插件、配置，也恳请你在下方留言。谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进程描述和控制]]></title>
    <link href="http://yuez.me/jin-cheng-miao-shu-he-kong-zhi/"/>
    <updated>2015-04-16T15:16:59+08:00</updated>
    <id>http://yuez.me/jin-cheng-miao-shu-he-kong-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>进程概念是现在操作系统的基本概念，已经成为计算机科学中的一大成就。</p></blockquote>

<h2>什么是进程？</h2>

<p>进程的出现，是为了是操作系统可以以一种有序的方式管理应用的执行，以达到以下目的：</p>

<ul>
<li>资源对多个应用程序是可用的</li>
<li>物理处理器在多个应用程序之间切换以保证所有程序都在执行中</li>
<li>处理器和I/O设备能得到充分利用</li>
</ul>


<p>所有现在操作系统采用的方法都是依据一个或者多个进程存在的应用程序执行的一种模型。
到底什么是进程呢？</p>

<p>进程是一组元素组成的实体，它可以是一个正在执行中的程序，也可以是一个能分配给处理
器并由处理器执行的实体。进程的两个基本元素是：<strong>程序代码(program code)</strong>和代码相
关联的<strong>数据集(set of data)</strong>。在进程执行时，任意给定一个时间，进程都可以唯一地
表征为以下元素：</p>

<ul>
<li><strong>标识符</strong>：进程的唯一标识符，用来区别其他进程</li>
<li><strong>状态</strong>：进程在不同的生命周期有着不同的状态</li>
<li><strong>优先级</strong>：相对于其他进程的优先级</li>
<li><strong>程序计数器</strong>：程序中即将被执行的下一条指令的地址</li>
<li><strong>内存指针</strong>：包含程序代码和进程相关数据的指针，还有和其他进程共享内存块的指针</li>
<li><strong>I/O状态信息</strong>：包括显示的I/O请求、分配给进程的I/O设备和被进程使用的文件列表等</li>
<li><strong>记账信息</strong>：可能包括处理器时间总和、使用的时钟数总和、时间限制、记账号等</li>
</ul>


<p>上述的列表信息被存放在一个称为<strong>进程控制块</strong>的数据结构中，该控制块由操作系统创建
和管理。</p>

<h2>进程状态</h2>

<p>在任何时刻，进程可以处于以下两种状态之一：运行态和未运行态，这是最简单的两状态模
型。在这个模型中，会有一个<strong>调度器(dispatcher)</strong>，使处理器从一个进程切换到另外一
个进程。</p>

<p><img class="lazy no-shadow" data-original="/photos/state-transition.jpg" width="640" height="200" title="'内存状态转换'" alt="'内存状态转换'"></p>

<p>由于存在着一些处于非运行状态但已经就绪等待执行的进程，而同时存在另外一些处于堵塞
状态等待I/O操作结束的进程。因此，解决这一问题比较自然的方法是使用五状态模型： <strong>
运行态、就绪态、堵塞/等待态、新建态和退出态</strong>。</p>

<p><img class="lazy no-shadow" data-original="/photos/five-state-process-model.jpg" width="640" height="200" title="'五状态模型'" alt="'五状态模型'"></p>

<h4>被挂起的进程</h4>

<p>上述的基本状态提供了一种为进程建立系统模型的方法，并指导系统的实现。但是，往这个
模型中添加其他状态也是合理的。</p>

<p>由于处理器的运行速度远大于I/O，以至于内存中所有的进程都在等待I/O的情况也是很常见
的。因此，即使是多道程序设计，大多数处理器仍然可能处于空闲状态。</p>

<p>一种解决方案是增大内存，使得内存中可以存在更多的进程。然而这种方案显然是治标不治
本的。</p>

<p>另外一种解决方案是<strong>交换(swapping)</strong>。当内存中没有处于就绪状态的进程时，操作系统
就把被阻塞的进程换出到磁盘中的<strong>挂起队列(suspend queue)</strong>。操作系统在此之后取出
挂起队列中的另一个进程，或者接受一个新进程，将其加载到内存中运行。这时，在进程状
态模型中添加了另外一个状态：<strong>挂起态</strong>。</p>

<p><img class="lazy no-shadow" data-original="/photos/one-suspend-state.jpg" width="640" height="200" title="'单挂起态模型'" alt="'单挂起态模型'"></p>

<p>当操作系统从挂起队列中取出一个依然阻塞的进程是毫无意义的，因为它仍然没有准备好执
行。所以为了区分被挂起的进程哪些是可以取出的，需要设计另外一种挂起模型：</p>

<p><img class="lazy no-shadow" data-original="/photos/with-two-suspend-state.jpg" width="640" height="200" title="'双挂起态模型'" alt="'双挂起态模型'"></p>

<p>为了区分，需要四个状态：</p>

<ul>
<li><strong>就绪态</strong>：进程在内存中并可以执行</li>
<li><strong>阻塞态</strong>：进程在进程中并等待一个事件</li>
<li><strong>阻塞/挂起态</strong>：进程在外存中并等待一个事件</li>
<li><strong>就绪/挂起态</strong>：进程在外存中，但是只要被载入内存就可以执行</li>
</ul>


<p>总结一下挂起的进程的概念：</p>

<ol>
<li>进程不能被立即执行。</li>
<li>进程可能是或不是正在等待一个事件。如果是，阻塞条件不依赖于挂起条件，阻塞事件的
的发生不会使进程立即执行。</li>
<li>为组织进程的执行，可以通过代理把这个进程置于挂起状态，代理可以是进程自己，也
可以是父进程或者操作系统。</li>
<li>除非代理显示的命令操作系统进行状态转换，否则进程无法从这个状态中转移。</li>
</ol>


<p>除了因为提供更多的内存空间，进程还会因为什么原因被挂起呢？</p>

<table>
<thead>
<tr>
<th>事件        </th>
<th>  说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>交换        </td>
<td>  操作系统需要释放更多的内存空间，以调入并执行处于就绪状态的进程</td>
</tr>
<tr>
<td>其他OS原因  </td>
<td>  操作系统可能挂起后台进程或工具程序进程，或者怀疑导致问题的进程</td>
</tr>
<tr>
<td>用户请求    </td>
<td>  用户可能希望挂起一个程序的执行，目的是为了调试或者与一个资源连接</td>
</tr>
<tr>
<td>定时        </td>
<td>  一个进程可能会周期性的执行，而且可能在等待下一个时间间隔时被挂起</td>
</tr>
<tr>
<td>父进程请求  </td>
<td>  父进程请求挂起后代进程，以检查或者修改挂起的进程</td>
</tr>
</tbody>
</table>


<p>在所有这些导致进程挂起的情况中，挂起进程的活动都是由最初请求挂起的代理请求的。</p>

<h2>进程描述</h2>

<p>操作系统控制计算机系统内部的事件，它为处理器执行进程而进行调度「schedule」和分派
「dispatch」，给进程分配资源，并响应用户程序的基本服务请求。因此，操作系统可以被
视为管理系统资源的实体。</p>

<p>操作系统为了控制进程和管理资源需要哪些信息呢？</p>

<h4>操作系统的控制结构</h4>

<p>为了管理进程和资源，操作系统构造并维护它所管理的每个实体的信息表。</p>

<p><img class="lazy no-shadow" data-original="/photos/control-tables.jpg" width="640" height="200" title="'操作系统控制表的通用结构'" alt="'操作系统控制表的通用结构'"></p>

<p>操作系统维护四种不同类型的表：<strong>内存、I/O、文件和进程</strong>。</p>

<p>内存表「memory tables」用于跟踪内存和外存。内存表必须包括一下信息：</p>

<ul>
<li>分配给进程的内存</li>
<li>分配给进程的外存</li>
<li>内存块或者虚拟内存块的保护属性</li>
<li>管理虚拟内存所需要的任何信息</li>
</ul>


<p>I/O表「I/O tables」用于管理计算机系统中的I/O设备和通道。在任何给定的时刻，一个I/O
设备或者是可用的，或者是已分配给某个特定的进程。如果正在进行I/O操作，则操作系统需
要知道I/O操作的状态和作为I/O传送的源与目标的内存单元。</p>

<p>文件表「file tables」用于提供关于文件是否存在、文件在外存中的位置、当前状态和属性
的信息。</p>

<p>进程表「process tables」为了管理和操作进程所必须使用的表。</p>

<h4>进程控制结构</h4>

<p>操作系统在管理和控制进程时，首先必须知道进程的位置，然后，它必须知道在管理时所必
需的进程的属性（如进程ID、进程状态）。</p>

<h5>进程位置</h5>

<p>想一个最基本的问题：进程的物理表示是什么？</p>

<p>回想之前关于进程的定义，进程至少包括一个或者一组被执行的程序，与这些程序相关联的
局部变量、全局变量和任何已定义常量的数据单元。因此，一个进程至少包括足够的内存空
间，以保存该进程的程序和数据；此外，程序的执行通常设计用于跟踪过程调用和过程间参
数传递的栈。最后，与每个进程相关联的还有操作系统用于控制进程的许多属性，也就是进
程控制块。程序、数据、栈和属性的集合称为<strong>进程映像「process image」</strong>。</p>

<p>在最简单的情况下，进程映像保存在邻近的活连续的存储块中。因此，操作系统必须知道每
个进程在磁盘中的位置；对于在内存中的进程，需要知道其在内存中的位置。</p>

<p>现代操作系统嘉定分页硬件允许用不连续的物理内存来支持部分常驻内存的程序。在任何给
定的时刻，进程映像的一部分可以在内存中，剩余部分可以在外存中。因此，操作系统维护
的进程表必须表明每个进程映像中每页的位置。</p>

<h5>进程属性</h5>

<p>操作系统所需要的每个进程信息的简单分类：</p>

<ul>
<li>进程标识信息</li>
<li>进程状态信息</li>
<li>进程控制信息</li>
</ul>


<p><img class="lazy no-shadow" data-original="/photos/user-processes-in-virtual-memory.jpg" width="640" height="200" title="'虚拟内存中的用户进程'" alt="'虚拟内存中的用户进程'"></p>

<p>所有的操作系统中，每个进程都分配了唯一的一个数字来表示<strong>进程标识符</strong>。除此之外，
还分配一个用户标识符，用于表明拥有该进程的用户。</p>

<p><strong>处理器状态信息</strong>包括处理器寄存器的内容。当进程被中断时，所有寄存器中的信息必须
被保存起来，使得进程恢复执行时，这些信息可以被恢复。</p>

<p>进程控制块中的第三类主要信息是<strong>进程控制信息</strong>，用于操作系统控制和协调各种活动进
程所需要的额外信息。</p>

<p>进程控制块中可能还包含构造信息，包括将进程控制块链接起来的指针。</p>

<p><img class="lazy no-shadow" data-original="/photos/process-list-structures.jpg" width="640" height="200" title="'进程链表结构'" alt="'进程链表结构'"></p>

<h5>进程控制块的作用</h5>

<p>进程控制块是操作系统中最重要的数据结构。操作系统中的每个模块，包括那些设计调度、
资源分配、中断处理、性能检测和分析的模块，都可能读取或者修改进程控制块。</p>

<h2>进程控制</h2>

<h4>执行模式</h4>

<p>为了保护操作系统和重要的操作系统表不受用户程序的干涉，操作系统通常使用两种模式管
理进程：特权模式『也称为系统模式(system mode)、控制模式(control mode)或者内核模式
(kernel mode)』，和用户模式。</p>

<p>在内核模式下，软件具有对处理器及所有指令、寄存器和内存的控制能力，这一级的控制对
用户程序不是必需的，并且为了安全也不是用户程序可以访问的。</p>

<h4>进程创建</h4>

<p>操作系统一般安装以下步骤创建进程：</p>

<ol>
<li>给进程分配一个唯一的进程标识符。此时，主进程表中增加一条新表项，其对应该进程。</li>
<li>给进程分配空间。包括进程映像中的所有元素。</li>
<li>初始化进程控制块。进程控制信息部分的初始化基于标准默认值和为该进程所请求的属
性。</li>
<li>设置正确的连接。</li>
<li>创建或者扩充其他数据结构。</li>
</ol>


<h4>进程切换</h4>

<p>关于进程切换，有着一些问题。</p>

<ul>
<li>进程什么时候进程切换？</li>
<li>执行模式切换和进程切换之间有什么区别？</li>
<li>进程切换时，操作系统必须对它控制的各种数据结构做什么？</li>
</ul>


<h5>何时切换进程</h5>

<p>通常，下列原因可能造成进程切换。</p>

<table>
<thead>
<tr>
<th>机制      </th>
<th>  原因  </th>
<th>  用例</th>
</tr>
</thead>
<tbody>
<tr>
<td>中断      </td>
<td>  当前指令的外部执行    </td>
<td>  对异步外部事件的反映</td>
</tr>
<tr>
<td>陷阱      </td>
<td>  与当前指令的执行有关  </td>
<td>  处理一个错误或者异常</td>
</tr>
<tr>
<td>系统调用  </td>
<td>  显式请求              </td>
<td>  调用操作系统函数</td>
</tr>
</tbody>
</table>


<h5>模式切换</h5>

<p>如果存在一个未处理的中断，处理器会做以下工作：</p>

<ul>
<li>把程序计数器置成中断处理程序的开始地址。</li>
<li>从用户模式切换到特权模式，使得中断处理代码可以包含有特权的指令。</li>
</ul>


<h5>进程的状态变化</h5>

<p>如果当前正在运行的进程被转换到另外一个状态（就绪、挂起等），则操作系统必须使其环
境发生实质性的变化：</p>

<ol>
<li>保存处理器的上下文环境，包括程序计数器和其他寄存器。</li>
<li>更新当前处于运行态进程的进程控制块，包括将进程状态改变到另外一个状态。</li>
<li>将进程的进程控制块移到相应的队列。</li>
<li>选择另一个进程执行。</li>
<li>更新所算则进程的进程控制块。</li>
<li>更新内存管理的数据结构。</li>
<li>恢复处理器在被选择的进程最近一次切换出运行状态时的上下文环境。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一名菜鸟IT项目经理的成长笔记]]></title>
    <link href="http://yuez.me/yi-ming-cai-niao-itxiang-mu-jing-li-de-cheng-chang-bi-ji/"/>
    <updated>2015-04-13T17:22:25+08:00</updated>
    <id>http://yuez.me/yi-ming-cai-niao-itxiang-mu-jing-li-de-cheng-chang-bi-ji</id>
    <content type="html"><![CDATA[<h2>是什么？</h2>

<p><strong>Q: 项目经理是什么？</strong></p>

<p>项目经理是公司委派，负责实现项目目标的个人，是公司授权的项目负责人，是项目的直
接组织者和管理者。</p>

<p><strong>Q：项目经理的职责是什么？</strong></p>

<ul>
<li>对项目全过程进行组织和管理，按预期交付项目的成果</li>
<li>管理客户关系，以取得客户对交付的成果和过程最满意的评价</li>
<li>管理项目团队，使之高效而愉快的工作，并获得最满意的工作体验</li>
</ul>


<p><strong>Q：IT项目经理的主要任务是什么？</strong></p>

<ol>
<li>支持售前过程。IT项目一般比较复杂，交付风险大，需要在合同中约定工作范围，进度
计划要估算成本和人力资源，制定切实可行的实施方案。</li>
<li>负责项目交付。围绕目标，按照规范执行项目计划。按期汇报进度，保证项目在计划内
交付。</li>
<li>完成项目收尾。完成交付成果之后，要讲成果转移给客户，确保客户可以稳定地使用系
统。</li>
<li>管理干系人的关系。沟通各方人员信息，保持密切联系，解决矛盾冲突。</li>
<li>管理项目团队。寻找合适的资源，优化资源配置，建立合理的组织结构，确定清晰的职
责分工，打造高效的项目团队。</li>
</ol>


<h2>需要什么素质？</h2>

<ol>
<li><strong>领导力</strong>。领导力是指通过他人来完成工作的能力。领导力并不意味着『官』，而应
该是『领头的』。不仅要求别人做的自己能做到，而且要知道『下一步』，目标在哪里。</li>
<li><strong>责任心</strong>。出于对承诺的负责，会倾尽全力达成目标。</li>
<li><strong>积极主动</strong>。善于利用自身的优势改变局势。</li>
<li><strong>压力承受</strong>。需要在压力中仍能保持镇定，冷静思考。</li>
</ol>


<h2>需要的知识和技能</h2>

<h4>专业知识</h4>

<ul>
<li>项目管理专业知识</li>
<li>IT技术</li>
<li>行业知识</li>
</ul>


<h4>实践技能</h4>

<ul>
<li>商务技能。要代表公司管理项目，履行合同。</li>
<li>项目启动。真正进入项目的第一个阶段往往是最慌乱的，必须清楚知道每天要做什么，这
样才能有条不紊。</li>
<li>计划的制定需要工具和平台，执行需要推进，质量需要把控。明确质量管理内容，以及在
什么情况下有权利喊『停』。</li>
</ul>


<h4>软技能</h4>

<ul>
<li>沟通和协调。沟通包括识别沟通对象，建立沟通渠道，明确沟通信息。</li>
<li>团队和激励。必须让成员能够团结，为了共同的目标而努力。</li>
<li>政治和文化。</li>
</ul>


<h2>项目启动的第一周</h2>

<p>项目启动时，需要做的事情：</p>

<ul>
<li>建立组织和制度。建立组织结构，确定职责分工，确定基本规章制度和工作流程。</li>
<li>明确工作思路。一边是要确认工作范围，制定工作计划；另一边要确定开发方法，特别是
马上要确定需求文档格式和工作流程。</li>
</ul>


<h4>启动的准备工作</h4>

<ol>
<li><strong>确认项目范围</strong>。项目中范围包括两大类：一类是产品范围，也就是应该覆盖的业务
需求；一类是为了实现项目目标所需要完成的工作。<br/>
将功能层级进行约定：

<ul>
<li>子系统：指相对比较独立、功能完整一组业务功能。</li>
<li>功能集：指在子系统内，按照业务特性归集的一组操作。</li>
<li>执行单元：一次完成的一个独立业务操作。</li>
</ul>
</li>
<li><strong>粗略工作量估算</strong>。</li>
<li><strong>人力资源的配置</strong>。</li>
<li><strong>确定开发过程</strong>。按照项目的实际情况，制定一个《项目开发过程》的文件。明确项
目的开发阶段，明确各阶段的交付物，制定交付物的模板。</li>
</ol>


<h2>群策群力，制定项目计划的方法</h2>

<ul>
<li>根据WBS方法指定活动清单。</li>
<li>确定活动之间的依赖，绘制网络图。</li>
<li>根据网络图的依赖关系和工期需求，分配资源，确定进度计划和资源计划。</li>
<li>根据资源和进度计划，制定项目预算。</li>
</ul>


<h4>通过需求矩阵，进行具体项目管理</h4>

<p>需求矩阵按照子系统、功能集和执行单元的结构列出所有的功能需求，每列对应每项工作的
工作步骤以及每个步骤的工作量。</p>

<p><img class="lazy no-shadow" data-original="/photos/xuqiujuzhen.jpg" width="640" height="200" title=""需求矩阵"" alt="&#34;需求矩阵&#34;"></p>

<h4>制定活动清单</h4>

<p>计划过程的步骤如下：</p>

<p><img class="lazy no-shadow" data-original="/photos/jihualiucheng.jpg" width="640" height="200" title=""计划流程"" alt="&#34;计划流程&#34;"></p>

<h4>排序和网络图分析</h4>

<p>有了活动清单和依赖关系，就可以进行排序了。我们可以使用节点表示任务，用箭头表示依
赖关系。</p>

<p><img class="lazy no-shadow" data-original="/photos/wangluotu.jpg" width="640" height="200" title=""网络图"" alt="&#34;网络图&#34;"></p>

<p>通过对网络图进行分析，可以得到项目与时间相关的一些重要信息：</p>

<ul>
<li>给定项目的预计和开始时间，能够计算每项活动必须开始和完成的最早时间。</li>
<li>给定项目的要求完工时间，能够计算每项活动必须开始和完成的最晚时间。</li>
<li>确定项目的关键路径，也就是最长活动路径。</li>
</ul>


<h4>资源和进度计划</h4>

<p>进度计划是将工作计划安排到日历上，它不仅规定了整个项目各个阶段的起止日期，还规定
了所有项目的开始和结束日期。可以使用<strong>甘特图</strong>进行项目中的进度管理。</p>

<p>进度计划排定时，重点考虑两点：</p>

<ul>
<li>资源的使用情况是否合理，是否存在资源冲突的情况。</li>
<li>对于那些有较大浮动时间的活动，可以初步确定是越早开始越好，还是越晚开始越好。</li>
</ul>


<h2>执行和检查</h2>

<p>对于辛苦制定地计划，如何让每个人按照计划工作？如果知道每个人的工作进展？</p>

<h4>阻碍计划落地执行的原因</h4>

<p>主要计划落地的主要原因有两点：</p>

<ul>
<li>没有将计划细分，个人和计划之间缺少一个桥梁。但是将计划拆分到每天做什么也不现实，
所以，这里是一个工作的难点。</li>
<li>执行项目的人员之间水平有差异。</li>
</ul>


<h4>任务的分解和委派</h4>

<p>为了解决上述问题，初步有了以下方案：</p>

<p><img class="lazy no-shadow" data-original="/photos/renwufenjie.jpg" width="640" height="200" title=""任务分解"" alt="&#34;任务分解&#34;"></p>

<ol>
<li>每组安周一周作为单位指定落实到个人头上的计划，制定一份一周工作计划表。</li>
<li>一周工作计划表每天检查，如果出现了异常，随时修改。</li>
<li>周五大家根据一周的工作内容，整理工作周报。</li>
</ol>


<p>这个方法是不错。但是如果将工作分解到每天的粒度呢？</p>

<p>基本思路是将工作按照工作的流程，分解为『关键步骤』，每项任务的一项关键步骤，作为
一个人的工作任务，也是最小的管理单元。个人工作任务只有『完成』和『未完成』两种状
态。</p>

<h4>检查和调整</h4>

<p>为了有效控制和掌握进度，检查和调整是很重要的一个环节。</p>

<p><strong>每日记录</strong></p>

<p>每天下班前，可由相关人员自己在标记当日工作计划的完成情况，有完成、延迟完成和延迟
中三种状态，并进行汇总统计。并且可以提出自己的问题，由相关人员讨论解决问题或者安
排时间专门讨论。</p>

<p><strong>周例会</strong></p>

<p>周例会检查和调整项目计划，需要一定的讨论，讨论的重点是：任务完成了吗？没完成的原
因是什么？怎么调整？</p>

<h2>质量管理</h2>

<h4>管什么？</h4>

<p>经过多年的发展，质量管理已经有了一套基本的理论和方法。质量管理包括质量保证和质量
控制两大类。质量保证是指在项目过程中实施的有计划、有系统的活动，确保满足相关的标
准，典型的例子是评审和审计。质量控制是指采取适当的方法监控项目结果，确保结果符合
质量标准，典型的例子就是测试以及之后的缺陷跟踪。</p>

<p>在IT行业软件开发领域中，常见的公认的质量活动包括：配置管理、评审、测试以及缺陷跟
踪。</p>

<ul>
<li>评审：检查项目中间产品，早期发现缺陷以减少后期项目返工和修改的工作量。</li>
<li>测试：直接检测软件产品中的缺陷，确保符合质量要求。一般通过单元测试、集成测试、
系统测试和性能测试实现。</li>
<li>缺陷跟踪：记录和追踪缺陷从发现到解决的整个过程，确保所有的结论都有结论。</li>
<li>审计：对项目工作过程进行检查，确保所有活动按照规程进行。</li>
<li>变更控制：版本本更控制，也是重要的一环。</li>
<li>配置管理：记录中间和最终产品（配置项）的变更历史。</li>
</ul>


<p>质量经理在项目中的职责如下：</p>

<ul>
<li>贯彻公司的质量管理规范，负责质量管理过程中的检查和指导。</li>
<li>负责制定项目开发/测试环境的标准和规范。</li>
<li>负责项目的配置管理，通过权限控制和备份机制确保交付物的完备和安全。</li>
<li>负责组织同行评审，确保中间交付物的质量。</li>
<li>制定测试策略和测试计划，组织测试，确保最终交付成果的质量。</li>
</ul>


<h4>项目配置管理</h4>

<p>项目配置管理是一项看不见的财富，可以在无形中减少因为版本意外等开发中出现的问题导
致的返工、重做等资源浪费。</p>

<p><strong>Q: 什么是项目配置管理？</strong></p>

<p>配置管理是在某一特定时点，确定软件配置的一个过程，通过对已标识的软件配置的一个过
程，通过对已表示的软件的配置的变更进行系统控制，从而在整个软件生命周期中保持软件
的整体性和可追溯性。</p>

<p><strong>Q: 配置管理的具体要做什么？</strong></p>

<p>通常来说，软件配置管理主要通过计划、标识和控制变更和发布配置状态报告来协调软件开
发，目的是使错误率达到最小并最有效地提高生产效率。</p>

<h4>质量评审</h4>

<p>评审的目的是尽早发现问题，一团和气的评审会完全达不到发现问题的目的。</p>

<p><strong>Q: 评审中的角色有哪些？</strong></p>

<p>首先要把评审中设计到的各个人员确认下来。评审过程中涉及的角色主要有四种：责任人、
主审人、评审专家和记录员。</p>

<p>主审人要先选定评审组的成员，然后再做评审的前期准备。在 评审过程中保证规范和高效，
评审结束后要将结果及时发布被评审相关人员。最后，还要对 评审中发现的问题追踪，直
到问题关闭。</p>

<p>责任人就是要被评审的对象。他们在评审之前准备好资料，在评审过程中解答提出的问题。
对于发现的问题要积极修正后提交给主审人。</p>

<p>记录员就是在评审过程中，把专家提出的问题都记录下来，还要记录责任人的回答信息，最
终要行程会议纪要，并且记录评审结果。</p>

<p>评审专家要彻底了解被评审的资料，其任务是寻找这些资料中的缺陷，侧重于发现问题而不
是解决问题。要保持客观。</p>

<p><strong>Q: 评审的过程是什么？</strong></p>

<p>评审的过程分为计划、预备会议、准备、评审会议和追踪几个阶段。</p>

<ul>
<li>计划阶段与项目计划同步，也就是说项目中有哪些要评审在项目计划中就已经提前定义好
了。</li>
<li>预备会议，针对要评审的资料对评审组进行培训，并讨论评审资料。</li>
<li>准备工作，是评审专家要彻底熟悉评审资料，以保证评审的质量和高效。</li>
<li>评审会议，是主审人和评审专家对项目资料中的错误和缺陷进行确认。</li>
<li>跟踪，主审人要确保责任人采取必要的措施修正发现的错误。</li>
</ul>


<p>一个评审反馈表如下：</p>

<p><img class="lazy no-shadow" data-original="/photos/pingshenfankuibiao.jpg" width="640" height="200" title=""评审反馈表"" alt="&#34;评审反馈表&#34;"></p>

<h4>让测试深入人心</h4>

<p>保证质量最有效的措施就是测试。</p>

<p><strong>Q: 为什么要有多种测试呢？</strong></p>

<p>不同的测试是针对不同的开发活动来设置的。下面是软件测试的一个『V模型』：</p>

<p><img class="lazy no-shadow" data-original="/photos/vmoxing.jpg" width="640" height="200" title=""测试V模型"" alt="&#34;测试V模型&#34;"></p>

<ul>
<li>单元测试，主要是开发人员对编写的代码进行自测或相互进行交叉测试，用以检查代码是
否符合编码规范，是否存在逻辑错误。</li>
<li>集成测试，将经过单元测试的模块组装成完整的程序。工作任务包括制定集成测试策略，
确定集成测试步骤，设计集成测试用例，然后逐一添加模块进行测试。</li>
<li>系统测试，是为了验证需求分析确定的功能是否被正确的实现，同时还要对安装、部署、
适应性、安全性、界面等非功能性需求进行测试。</li>
<li>性能测试，用来测试系统是否满足规定的性能需求。性能测试通常选择一些典型的功能，
检验这些功能在大量用户同时使用时是否稳定。</li>
<li>用户验收测试，目的是验证需求与系统的匹配性，以及界面的友好性，响应时间等等。</li>
</ul>


<h4>缺陷跟踪</h4>

<p><strong>Q: 为什么要进行缺陷跟踪？</strong></p>

<p>缺陷跟踪可以记录测试结果，确定代码质量，是确保问题得到解决的一个关键流程。其目的
是规范评审、测试、试运行等过程中发现缺陷的更改活动；跟踪缺陷处理的各个环节、避免
缺陷修改失控和遗漏；如实的反映缺陷处理过程。</p>

<p><strong>Q: 怎么进行缺陷跟踪？</strong></p>

<p>缺陷跟踪的起点是各种发现缺陷的活动，发现缺陷之后就进入了缺陷的跟踪流程，包括提交、
判断、分发、修改、复核和关闭几个关键步骤。</p>

<p>缺陷跟踪除了记录和跟踪缺陷的修复过程，很重要的还有对缺陷进行分类、统计和分析。</p>

<p>缺陷的类型一般分为一下几种：</p>

<table>
<thead>
<tr>
<th>缺陷类型</th>
<th>描述</th>
<th>可能的缺陷来源</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户界面</td>
<td>用户界面显示或者操作存在问题</td>
<td>详细设计</td>
</tr>
<tr>
<td>架构    </td>
<td>系统存在架构方面问题</td>
<td>架构设计、概要设计</td>
</tr>
<tr>
<td>接口    </td>
<td>系统内、外部接口错误，不能正常连接和工作</td>
<td>架构设计、概要设计</td>
</tr>
<tr>
<td>业务功能</td>
<td>业务功能不完善、未实现或者出现错误</td>
<td>需求分析、需求规格</td>
</tr>
<tr>
<td>系统功能</td>
<td>与业务无关，但是系统必须实现的功能不完整、未实现或者出现错误</td>
<td>架构设计、概要设计</td>
</tr>
<tr>
<td>性能    </td>
<td>系统的响应时间、吞吐量、并发量等不满足需求</td>
<td>架构设计、概要设计、编码</td>
</tr>
<tr>
<td>可重用性</td>
<td>不满足被其他系统或者模块复用的要求</td>
<td>概要设计、编码</td>
</tr>
<tr>
<td>可移植性</td>
<td>不满足可跨平台移植或者部署的要求</td>
<td>概要设计、详细设计</td>
</tr>
</tbody>
</table>


<p>缺陷的严重性说明了缺陷给最终交付的系统或者产品可能造成的影响程度。其中A级影响程
度最大，E级最小。</p>

<table>
<thead>
<tr>
<th>严重性等级   </th>
<th>   描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>A级（系统级）</td>
<td>系统整体崩溃，或者不能稳定地连续工作</td>
</tr>
<tr>
<td>B级（应用级）</td>
<td>部分应用或者子系统不能运行，或者不能稳定地连续工作</td>
</tr>
<tr>
<td>C级（业务级）</td>
<td>导致业务流程终止，或者因结果错误、数据不一致失败；因安全、容错性和性能问题等非功能性问题影响使用</td>
</tr>
<tr>
<td>D级（操作级）</td>
<td>不易于学习使用，界面操作困难；难以理解而不容易使用</td>
</tr>
<tr>
<td>E级（文档级）</td>
<td>安装手册、操作手册、在线帮助等文档不能提供帮助或者存在错误</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零搭建和配置OSX开发环境]]></title>
    <link href="http://yuez.me/cong-ling-da-jian-he-pei-zhi-osxkai-fa-huan-jing/"/>
    <updated>2015-04-03T22:52:14+08:00</updated>
    <id>http://yuez.me/cong-ling-da-jian-he-pei-zhi-osxkai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p>对于每一名开发者来说，更换系统或者更换电脑的时候，都免不了花上不短的时间去折腾开
发环境的问题。我本人也是三番两次，深知这个过程的繁琐。所有，根据我自己以往的经验，
以及参考一下他人的意见，整理一下关于在Mac下做各种开发的配置，包含Java, Ruby, Vim,
git, 数据库等等。欢迎补充与修正。</p>

<h2><i class="fa fa fa-anchor"></i> Terminal篇</h2>

<p>这篇文章包含配置控制台环境，包括包管理工具, zsh, Vim, git的安装配置。</p>

<h4>Homebrew, 你不能错过的包管理工具</h4>

<p>包管理工具已经成为现在操作系统中不可缺少的一个重要工具了，它能大大减轻软件安装的
负担，节约我们的时间。Linux中常用的有<code>yum</code>和<code>apt-get</code>工具，甚至Windows平台也
有<code>Chocolatey</code>这样优秀的工具，OSX平台自然有它独有的工具。</p>

<p>在OSX中，有两款大家常用的管理工具：<code>Homebrew</code>或者<code>MacPorts</code>。这两款工具都是为了解决同
样的问题——为OSX安装常用库和工具。Homebrew与MacPorts的主要区别是Homebrew不会破坏OSX
原生的环境，这也是我推荐Homebrew的主要原因。同时它安装的所有文件都是在用户独立空间内
的，这让你安装的所有软件对于该用户来说都是可以访问的，不需要使用<code>sudo</code>命令。</p>

<blockquote><p>在安装Homebrew前，你需要前往AppStore下载并安装Xcode.</p></blockquote>

<p>安装方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># OSX系统基本上都自带Ruby1.9</span>
</span><span class='line'><span class="c"># 所以无需先安装Ruby，但是之后我们需要管理Ruby</span>
</span><span class='line'>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Homebrew</code>常用命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew list                 <span class="c"># 查看已经安装的包</span>
</span><span class='line'>brew update               <span class="c"># 更新Homebrew自身</span>
</span><span class='line'>brew doctor               <span class="c"># 诊断关于Homebrew的问题(Homebrew 有问题时请用它)</span>
</span><span class='line'>brew cleanup              <span class="c"># 清理老版本软件包或者无用的文件</span>
</span><span class='line'>brew show <span class="k">${</span><span class="nv">formula</span><span class="k">}</span>      <span class="c"># 查看包信息</span>
</span><span class='line'>brew search <span class="k">${</span><span class="nv">formula</span><span class="k">}</span>    <span class="c"># 按名称搜索</span>
</span><span class='line'>brew upgrade <span class="k">${</span><span class="nv">formula</span><span class="k">}</span>   <span class="c"># 升级软件包</span>
</span><span class='line'>brew install <span class="k">${</span><span class="nv">formula</span><span class="k">}</span>   <span class="c"># 按名称安装</span>
</span><span class='line'>brew uninstall <span class="k">${</span><span class="nv">formula</span><span class="k">}</span> <span class="c"># 按名称卸载</span>
</span><span class='line'>brew pin/unpin <span class="k">${</span><span class="nv">formula</span><span class="k">}</span> <span class="c"># 锁定或者解锁软件包版本，防止误升级</span>
</span></code></pre></td></tr></table></div></figure>


<h4>zsh，好用的shell</h4>

<p>Shell程序就是Linux/UNIX系统中的一层外壳，几乎所有的应用程序都可以运行在Shell环境
下，常用的有bash, csh, zcsh等。在<code>/etc/shells</code>文件中可以查看系统中的各种shell。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /etc/shells
</span><span class='line'>
</span><span class='line'><span class="c"># List of acceptable shells for chpass(1).</span>
</span><span class='line'><span class="c"># Ftpd will not allow users to connect who are not using</span>
</span><span class='line'><span class="c"># one of these shells.</span>
</span><span class='line'>
</span><span class='line'>/bin/bash
</span><span class='line'>/bin/csh
</span><span class='line'>/bin/ksh
</span><span class='line'>/bin/sh
</span><span class='line'>/bin/tcsh
</span><span class='line'>/bin/zsh
</span></code></pre></td></tr></table></div></figure>


<p>而zsh是OSX系统原生的shell之一，其功能强大，语法相对于bash更加友好和强大，所以推荐
使用zsh作为默认的shell。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 切换zsh为默认shell</span>
</span><span class='line'>chsh -s <span class="k">$(</span>which zsh<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想使用最新的zsh，你可以使用Homebrew，此方法也会保留原生的zsh，防止你在某个
时刻需要它。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 查看最新zsh信息</span>
</span><span class='line'>brew info zsh
</span><span class='line'>
</span><span class='line'><span class="c"># 安装zsh</span>
</span><span class='line'>brew install --disable-etcdir zsh
</span><span class='line'>
</span><span class='line'><span class="c"># 添加shell路径至/etc/shells文件中</span>
</span><span class='line'><span class="c"># 将 /usr/local/bin/zsh 添加到下面文件中</span>
</span><span class='line'>sudo vim /etc/shells
</span><span class='line'>
</span><span class='line'><span class="c"># 更换默认shell</span>
</span><span class='line'>chsh -s /usr/local/bin/zsh
</span></code></pre></td></tr></table></div></figure>


<p>下面贴上我的zsh配置以供参考</p>

<figure class='code'><figcaption><span>我的zsh配置  (zshrc)</span> <a href='http://yuez.me/downloads/code/zshrc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># modify the prompt to contain git branch name if applicable</span>
</span><span class='line'>git_prompt_info<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">ref</span><span class="o">=</span><span class="k">$(</span>git symbolic-ref HEAD 2&gt; /dev/null<span class="k">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> -n <span class="nv">$ref</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot; %{$fg_bold[green]%}${ref#refs/heads/}%{$reset_color%}&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>setopt promptsubst
</span><span class='line'><span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s1">&#39;${SSH_CONNECTION+&quot;%{$fg_bold[green]%}%n@%m:&quot;}%{$fg_bold[blue]%}%c%{$reset_color%}$(git_prompt_info) %# &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load our own completion functions</span>
</span><span class='line'><span class="nv">fpath</span><span class="o">=(</span>~/.zsh/completion <span class="nv">$fpath</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># completion</span>
</span><span class='line'>autoload -U compinit
</span><span class='line'>compinit
</span><span class='line'>
</span><span class='line'><span class="c"># load custom executable functions</span>
</span><span class='line'><span class="k">for</span> <span class="k">function</span> in ~/.zsh/functions/*<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">source</span> <span class="nv">$function</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># makes color constants available</span>
</span><span class='line'>autoload -U colors
</span><span class='line'>colors
</span><span class='line'>
</span><span class='line'><span class="c"># enable colored output from ls, etc</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CLICOLOR</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="c"># history settings</span>
</span><span class='line'>setopt hist_ignore_all_dups inc_append_history
</span><span class='line'><span class="nv">HISTFILE</span><span class="o">=</span>~/.zhistory
</span><span class='line'><span class="nv">HISTSIZE</span><span class="o">=</span>4096
</span><span class='line'><span class="nv">SAVEHIST</span><span class="o">=</span>4096
</span><span class='line'>
</span><span class='line'><span class="c"># awesome cd movements from zshkit</span>
</span><span class='line'>setopt autocd autopushd pushdminus pushdsilent pushdtohome cdablevars
</span><span class='line'><span class="nv">DIRSTACKSIZE</span><span class="o">=</span>5
</span><span class='line'>
</span><span class='line'><span class="c"># Enable extended globbing</span>
</span><span class='line'>setopt extendedglob
</span><span class='line'>
</span><span class='line'><span class="c"># Allow [ or ] whereever you want</span>
</span><span class='line'>unsetopt nomatch
</span><span class='line'>
</span><span class='line'><span class="c"># vi mode</span>
</span><span class='line'>bindkey -v
</span><span class='line'>bindkey <span class="s2">&quot;^F&quot;</span> vi-cmd-mode
</span><span class='line'>bindkey jj vi-cmd-mode
</span><span class='line'>
</span><span class='line'><span class="c"># handy keybindings</span>
</span><span class='line'>bindkey <span class="s2">&quot;^A&quot;</span> beginning-of-line
</span><span class='line'>bindkey <span class="s2">&quot;^E&quot;</span> end-of-line
</span><span class='line'>bindkey <span class="s2">&quot;^R&quot;</span> <span class="nb">history</span>-incremental-search-backward
</span><span class='line'>bindkey <span class="s2">&quot;^P&quot;</span> <span class="nb">history</span>-search-backward
</span><span class='line'>bindkey <span class="s2">&quot;^Y&quot;</span> accept-and-hold
</span><span class='line'>bindkey <span class="s2">&quot;^N&quot;</span> insert-last-word
</span><span class='line'>bindkey -s <span class="s2">&quot;^T&quot;</span> <span class="s2">&quot;^[Isudo ^[A&quot;</span> <span class="c"># &quot;t&quot; for &quot;toughguy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># use vim as the visual editor</span>
</span><span class='line'><span class="nb">export </span><span class="nv">VISUAL</span><span class="o">=</span>vim
</span><span class='line'><span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span><span class="nv">$VISUAL</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load rbenv if available</span>
</span><span class='line'><span class="k">if</span> which rbenv <span class="p">&amp;</span>&gt;/dev/null <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(rbenv init - --no-rehash)&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load thoughtbot/dotfiles scripts</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.bin:$PATH&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># mkdir .git/safe in the root of repositories you trust</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;.git/safe/../../bin:$PATH&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># aliases</span>
</span><span class='line'><span class="o">[[</span> -f ~/.aliases <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> ~/.aliases
</span><span class='line'>
</span><span class='line'><span class="c"># Local config</span>
</span><span class='line'><span class="o">[[</span> -f ~/.zshrc.local <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> ~/.zshrc.local
</span></code></pre></td></tr></table></div></figure>


<h4>好用的编辑器 Vim</h4>

<p>对于Vim，无需溢美之词，作为与emacs并列的两大编辑器，早已经被无数人奉为经典。而它却
又以超长的学习曲线，使得很多人望而却步。长久以来，虽然拥有大量的插件，却缺少一个
确之有效的插件管理器。所幸，<code>Vundle</code>的出现解决了这个问题。</p>

<p><code>Vundle</code>可以让你在配置文件中管理插件，并且非常方便的查找、安装、更新或者删除插件。
还可以帮你自动配置插件的执行路径和生成帮助文件。相对于另外一个管理工具<code>pathogen</code>，
可以说有着巨大的优势。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># vundle 安装和配置</span>
</span><span class='line'>git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; 将下面配置文件加入到.vimrc文件中</span>
</span><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span> <span class="c">&quot; 必须</span>
</span><span class='line'><span class="k">filetype</span> off     <span class="c">&quot; 必须</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 将Vundle加入运行时路径中(Runtime path)</span>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle/Vundle.<span class="k">vim</span>
</span><span class='line'><span class="k">call</span> vundle#begin<span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 使用Vundle管理插件，必须</span>
</span><span class='line'>Plugin <span class="s1">&#39;gmarik/Vundle.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot;</span>
</span><span class='line'><span class="c">&quot; 其他插件</span>
</span><span class='line'><span class="c">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">call</span> vundle#<span class="k">end</span><span class="p">()</span> <span class="c">&quot; 必须</span>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span> <span class="c">&quot; 必须</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，你只需要执行安装命令，即可以安装好所需的插件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 在vim中</span>
</span><span class='line'>:PluginInstall
</span><span class='line'>
</span><span class='line'><span class="c"># 在终端</span>
</span><span class='line'>vim +PluginInstall +qall
</span></code></pre></td></tr></table></div></figure>


<p>下面列出我的Vim插件和配置</p>

<figure class='code'><figcaption><span>Vim插件  (vimrc.bundles)</span> <a href='http://yuez.me/downloads/code/vimrc.bundles'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> &amp;<span class="nb">compatible</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">filetype</span> off
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'><span class="k">call</span> vundle#rc<span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Let Vundle manage Vundle</span>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Define bundles via Github repos</span>
</span><span class='line'>Bundle <span class="s1">&#39;christoomey/vim-run-interactive&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;croaky/vim-colors-github&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;danro/rename.vim&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;kchmck/vim-coffee-script&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;pbrisbin/vim-mkdir&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;scrooloose/syntastic&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;slim-template/vim-slim&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;thoughtbot/vim-rspec&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-bundler&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-endwise&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-rails&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-surround&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;vim-ruby/vim-ruby&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;vim-scripts/ctags.vim&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;vim-scripts/matchit.zip&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;vim-scripts/tComment&#39;</span>
</span><span class='line'>Bundle <span class="s2">&quot;mattn/emmet-vim&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;scrooloose/nerdtree&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;Lokaltog/vim-powerline&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;godlygeek/tabular&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;msanders/snipmate.vim&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;jelera/vim-javascript-syntax&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;altercation/vim-colors-solarized&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;othree/html5.vim&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;xsbeats/vim-blade&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;Raimondi/delimitMate&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;groenewege/vim-less&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;evanmiller/nginx-vim-syntax&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;Lokaltog/vim-easymotion&quot;</span>
</span><span class='line'>Bundle <span class="s2">&quot;tomasr/molokai&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> filereadable<span class="p">(</span>expand<span class="p">(</span><span class="s2">&quot;~/.vimrc.bundles.local&quot;</span><span class="p">))</span>
</span><span class='line'>  source <span class="p">~</span>/.vimrc.bundles.local
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">filetype</span> <span class="k">on</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Vim配置  (vimrc)</span> <a href='http://yuez.me/downloads/code/vimrc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Use Vim settings, rather then Vi settings. This setting must be as early as</span>
</span><span class='line'><span class="c">&quot; possible, as it has side effects.</span>
</span><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Highlight current line</span>
</span><span class='line'><span class="k">au</span> <span class="nb">WinLeave</span> * <span class="k">set</span> <span class="nb">nocursorline</span> <span class="nb">nocursorcolumn</span>
</span><span class='line'><span class="k">au</span> <span class="nb">WinEnter</span> * <span class="k">set</span> <span class="nb">cursorline</span> <span class="nb">cursorcolumn</span>
</span><span class='line'><span class="k">set</span> <span class="nb">cursorline</span> <span class="nb">cursorcolumn</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Leader</span>
</span><span class='line'><span class="k">let</span> mapleader <span class="p">=</span> <span class="s2">&quot;,&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">backspace</span><span class="p">=</span><span class="m">2</span>   <span class="c">&quot; Backspace deletes like most programs in insert mode</span>
</span><span class='line'><span class="k">set</span> <span class="nb">nobackup</span>
</span><span class='line'><span class="k">set</span> <span class="nb">nowritebackup</span>
</span><span class='line'><span class="k">set</span> <span class="nb">noswapfile</span>    <span class="c">&quot; http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287</span>
</span><span class='line'><span class="k">set</span> <span class="k">history</span><span class="p">=</span><span class="m">50</span>
</span><span class='line'><span class="k">set</span> <span class="nb">ruler</span>         <span class="c">&quot; show the cursor position all the time</span>
</span><span class='line'><span class="k">set</span> <span class="nb">showcmd</span>       <span class="c">&quot; display incomplete commands</span>
</span><span class='line'><span class="k">set</span> <span class="nb">incsearch</span>     <span class="c">&quot; do incremental searching</span>
</span><span class='line'><span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span>  <span class="c">&quot; Always display the status line</span>
</span><span class='line'><span class="k">set</span> <span class="nb">autowrite</span>     <span class="c">&quot; Automatically :write before running commands</span>
</span><span class='line'><span class="k">set</span> <span class="k">confirm</span>       <span class="c">&quot; Need confrimation while exit</span>
</span><span class='line'><span class="k">set</span> <span class="nb">fileencodings</span><span class="p">=</span>utf<span class="m">-8</span><span class="p">,</span>gb18030<span class="p">,</span>gbk<span class="p">,</span>big5
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Switch syntax highlighting on, when the terminal has colors</span>
</span><span class='line'><span class="c">&quot; Also switch on highlighting the last used search pattern.</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span>&amp;<span class="nb">t_Co</span> <span class="p">&gt;</span> <span class="m">2</span> <span class="p">||</span> has<span class="p">(</span><span class="s2">&quot;gui_running&quot;</span><span class="p">))</span> &amp;&amp; <span class="p">!</span>exists<span class="p">(</span><span class="s2">&quot;syntax_on&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">syntax</span> <span class="k">on</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> filereadable<span class="p">(</span>expand<span class="p">(</span><span class="s2">&quot;~/.vimrc.bundles&quot;</span><span class="p">))</span>
</span><span class='line'>  source <span class="p">~</span>/.vimrc.bundles
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>
</span><span class='line'>
</span><span class='line'>augroup vimrcEx
</span><span class='line'>  <span class="k">autocmd</span><span class="p">!</span>
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; When editing a file, always jump to the last known cursor position.</span>
</span><span class='line'><span class="c">  &quot; Don&#39;t do it for commit messages, when the position is invalid, or when</span>
</span><span class='line'><span class="c">  &quot; inside an event handler (happens when dropping a file on gvim).</span>
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">BufReadPost</span> *
</span><span class='line'>    \ <span class="k">if</span> &amp;<span class="nb">ft</span> <span class="p">!=</span> <span class="s1">&#39;gitcommit&#39;</span> &amp;&amp; line<span class="p">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="p">)</span> <span class="p">&gt;</span> <span class="m">0</span> &amp;&amp; line<span class="p">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="p">)</span> <span class="p">&lt;=</span> line<span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="p">)</span> <span class="p">|</span>
</span><span class='line'>    \   exe <span class="s2">&quot;normal g`\&quot;&quot;</span> <span class="p">|</span>
</span><span class='line'>    \ <span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; Cucumber navigation commands</span>
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">User</span> Rails Rnavcommand step features<span class="sr">/step_definitions -glob=**/</span>* <span class="p">-</span>suffix<span class="p">=</span>_steps.rb
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">User</span> Rails Rnavcommand config config <span class="p">-</span>glob<span class="p">=</span>**/* <span class="p">-</span>suffix<span class="p">=</span>.rb <span class="p">-</span>default<span class="p">=</span>routes
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; Set syntax highlighting for specific file types</span>
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> Appraisals <span class="k">set</span> <span class="k">filetype</span><span class="p">=</span><span class="k">ruby</span>
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> *.md <span class="k">set</span> <span class="k">filetype</span><span class="p">=</span>markdown
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; Enable spellchecking for Markdown</span>
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">FileType</span> markdown <span class="k">setlocal</span> <span class="k">spell</span>
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; Automatically wrap at 80 characters for Markdown</span>
</span><span class='line'>  <span class="k">autocmd</span> <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> *.md <span class="k">setlocal</span> <span class="nb">textwidth</span><span class="p">=</span><span class="m">80</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Softtabs, 2 spaces</span>
</span><span class='line'><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftround</span>
</span><span class='line'><span class="k">set</span> <span class="nb">expandtab</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Display extra whitespace</span>
</span><span class='line'><span class="k">set</span> <span class="nb">list</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:»·<span class="p">,</span>trail:·
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Use The Silver Searcher https://github.com/ggreer/the_silver_searcher</span>
</span><span class='line'><span class="k">if</span> executable<span class="p">(</span><span class="s1">&#39;ag&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">  &quot; Use Ag over Grep</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">grepprg</span><span class="p">=</span>ag\ <span class="p">--</span>nogroup\ <span class="p">--</span>nocolor
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; Use ag in CtrlP for listing files. Lightning fast and respects .gitignore</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:ctrlp_user_command <span class="p">=</span> <span class="s1">&#39;ag %s -l --nocolor -g &quot;&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">  &quot; ag is fast enough that CtrlP doesn&#39;t need to cache</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:ctrlp_use_caching <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Color scheme</span>
</span><span class='line'><span class="k">colorscheme</span> molokai
</span><span class='line'><span class="nb">highlight</span> NonText guibg<span class="p">=</span><span class="mh">#060606</span>
</span><span class='line'><span class="nb">highlight</span> Folded  guibg<span class="p">=</span>#<span class="m">0</span>A<span class="m">0</span>A<span class="m">0</span>A guifg<span class="p">=</span>#<span class="m">9090</span>D<span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Make it obvious where 80 characters is</span>
</span><span class='line'><span class="k">set</span> <span class="nb">textwidth</span><span class="p">=</span><span class="m">80</span>
</span><span class='line'><span class="k">set</span> <span class="nb">colorcolumn</span><span class="p">=+</span><span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Numbers</span>
</span><span class='line'><span class="k">set</span> <span class="k">number</span>
</span><span class='line'><span class="k">set</span> <span class="nb">numberwidth</span><span class="p">=</span><span class="m">5</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Tab completion</span>
</span><span class='line'><span class="c">&quot; will insert tab at beginning of line,</span>
</span><span class='line'><span class="c">&quot; will use completion if not at beginning</span>
</span><span class='line'><span class="k">set</span> <span class="nb">wildmode</span><span class="p">=</span><span class="nb">list</span>:longest<span class="p">,</span><span class="nb">list</span>:full
</span><span class='line'><span class="k">function</span><span class="p">!</span> InsertTabWrapper<span class="p">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">col</span> <span class="p">=</span> <span class="k">col</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">!</span><span class="k">col</span> <span class="p">||</span> getline<span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>[<span class="k">col</span> <span class="p">-</span> <span class="m">1</span>] <span class="p">!~</span> <span class="s1">&#39;\k&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;\&lt;tab&gt;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;\&lt;c-p&gt;&quot;</span>
</span><span class='line'>    <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>Tab<span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">r</span><span class="p">&gt;=</span>InsertTabWrapper<span class="p">()&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>S<span class="p">-</span>Tab<span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">n</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:Tlist_Ctags_Cmd<span class="p">=</span><span class="s2">&quot;ctags --exclude=&#39;*.js&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Index ctags from any project, including those outside Rails</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span>ct :<span class="p">!</span>ctags <span class="p">-</span>R .<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Switch between the last two files</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>leader<span class="p">&gt;&lt;</span>leader<span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span>^<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Get off my lawn</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Left<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use h&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Right<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use l&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Up<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use k&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Down<span class="p">&gt;</span> :<span class="k">echoe</span> <span class="s2">&quot;Use j&quot;</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; vim-rspec mappings</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">t</span> :<span class="k">call</span> RunCurrentSpecFile<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">s</span> :<span class="k">call</span> RunNearestSpec<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">l</span> :<span class="k">call</span> RunLastSpec<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Run commands that require an interactive shell</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">r</span> :RunInInteractiveShell<span class="p">&lt;</span>space<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Treat &lt;li&gt; and &lt;p&gt; tags like the block tags they are</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:html_indent_tags <span class="p">=</span> <span class="s1">&#39;li\|p&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Open new split panes to right and bottom, which feels more natural</span>
</span><span class='line'><span class="k">set</span> <span class="nb">splitbelow</span>
</span><span class='line'><span class="k">set</span> <span class="nb">splitright</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Quicker window movement</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">j</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">j</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">k</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">k</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">h</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">h</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">l</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">l</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; configure syntastic syntax checking to check on open as well as save</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_check_on_open<span class="p">=</span><span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_html_tidy_ignore_errors<span class="p">=</span>[<span class="s2">&quot; proprietary attribute \&quot;ng-&quot;</span>]
</span><span class='line'>
</span><span class='line'><span class="k">autocmd</span> <span class="nb">Syntax</span> javascript <span class="k">set</span> <span class="nb">syntax</span><span class="p">=</span>jquery <span class="c">&quot; JQuery syntax support</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">matchpairs</span><span class="p">+=&lt;</span>:<span class="p">&gt;</span>
</span><span class='line'><span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%{fugitive#<span class="nb">statusline</span><span class="p">()</span>} <span class="c">&quot;  Git Hotness</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Nerd Tree</span>
</span><span class='line'><span class="k">let</span> NERDChristmasTree<span class="p">=</span><span class="m">0</span>
</span><span class='line'><span class="k">let</span> NERDTreeWinSize<span class="p">=</span><span class="m">40</span>
</span><span class='line'><span class="k">let</span> NERDTreeChDirMode<span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">let</span> NERDTreeIgnore<span class="p">=</span>[<span class="s1">&#39;\~$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.pyc$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.swp$&#39;</span>]
</span><span class='line'><span class="k">let</span> NERDTreeShowBookmarks<span class="p">=</span><span class="m">1</span>
</span><span class='line'><span class="k">let</span> NERDTreeWinPos<span class="p">=</span><span class="s2">&quot;right&quot;</span>
</span><span class='line'><span class="k">autocmd</span> vimenter * <span class="k">if</span> <span class="p">!</span>argc<span class="p">()</span> <span class="p">|</span> NERDTree <span class="p">|</span> <span class="k">endif</span> <span class="c">&quot; Automatically open a NERDTree if no files where specified</span>
</span><span class='line'><span class="k">autocmd</span> bufenter * <span class="k">if</span> <span class="p">(</span>winnr<span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="p">)</span> <span class="p">==</span> <span class="m">1</span> &amp;&amp; exists<span class="p">(</span><span class="s2">&quot;b:NERDTreeType&quot;</span><span class="p">)</span> &amp;&amp; <span class="k">b</span>:NERDTreeType <span class="p">==</span> <span class="s2">&quot;primary&quot;</span><span class="p">)</span> <span class="p">|</span> <span class="k">q</span> <span class="p">|</span> <span class="k">endif</span> <span class="c">&quot; Close vim if the only window left open is a NERDTree</span>
</span><span class='line'>nmap <span class="p">&lt;</span>F5<span class="p">&gt;</span> :NERDTreeToggle<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Emmet</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:user_emmet_mode<span class="p">=</span><span class="s1">&#39;i&#39;</span> <span class="c">&quot; enable for insert mode</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Search results high light</span>
</span><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; nohlsearch shortcut</span>
</span><span class='line'>nmap <span class="p">-</span><span class="nb">hl</span> :<span class="k">nohlsearch</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">+</span><span class="nb">hl</span> :<span class="k">set</span> <span class="nb">hlsearch</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Javascript syntax hightlight</span>
</span><span class='line'><span class="nb">syntax</span> enable
</span><span class='line'>
</span><span class='line'><span class="c">&quot; ctrap</span>
</span><span class='line'><span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*<span class="sr">/tmp/</span>*<span class="p">,</span>*.<span class="k">so</span><span class="p">,</span>*.swp<span class="p">,</span>*.zip     <span class="s2">&quot; MacOSX/Linux&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:ctrlp_custom_ignore <span class="p">=</span> <span class="s1">&#39;\v[\/]\.(git|hg|svn)$&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">w</span> :<span class="k">w</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">q</span> :<span class="k">q</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; RSpec.vim mappings</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">t</span> :<span class="k">call</span> RunCurrentSpecFile<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">s</span> :<span class="k">call</span> RunNearestSpec<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">l</span> :<span class="k">call</span> RunLastSpec<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">a</span> :<span class="k">call</span> RunAllSpecs<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Vim-instant-markdown doesn&#39;t work in zsh</span>
</span><span class='line'><span class="k">set</span> <span class="k">shell</span><span class="p">=</span>bash\ <span class="p">-</span><span class="k">i</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Snippets author</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:snips_author <span class="p">=</span> <span class="s1">&#39;Yuez&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Local config</span>
</span><span class='line'><span class="k">if</span> filereadable<span class="p">(</span>$HOME . <span class="s2">&quot;/.vimrc.local&quot;</span><span class="p">)</span>
</span><span class='line'>  source <span class="p">~</span>/.vimrc.local
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<h4>新世代的版本管理工具 git</h4>

<p>Git是一个分散式版本控制软件。最初的目的是为了更好的管理Linux内核开发而设计。与CVS、
Subversion等集中式版本控制软件不同，Git不需要服务器端软件就可以发挥版本控制的作用。
使得代码的维护和发布变得非常方便。</p>

<p>Git库目录结构</p>

<ul>
<li>hooks   : 存储钩子文件夹</li>
<li>logs    : 存储日志文件夹</li>
<li>refs    : 存储指向各个分支指针的(SHA-1)的文件夹</li>
<li>objects : 存储git对象</li>
<li>config  : 存储配置文件</li>
<li>HEAD    : 指向当前分支的指针文件路径</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 安装git</span>
</span><span class='line'>brew install git
</span></code></pre></td></tr></table></div></figure>


<p>Git安装完毕后，只需要使用<code>git config</code>简单配置下用户名和邮箱就可以使用了。</p>

<ul>
<li><a href="http://www.bootcss.com/p/git-guide/">Git中文简易指南</a></li>
<li><a href="https://help.github.com">Git官网帮助</a></li>
</ul>


<p>为了使Git更好用，对Git做一些配置，<code>.gitconfig</code>文件中可以设置自定义命令等，<code>.gitignore</code>
文件是默认被忽略版本管理的文件。</p>

<figure class='code'><figcaption><span> (gitconfig)</span> <a href='http://yuez.me/downloads/code/gitconfig'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="k">[push]</span>
</span><span class='line'>  <span class="na">default</span> <span class="o">=</span> <span class="s">current</span>
</span><span class='line'><span class="k">[color]</span>
</span><span class='line'>  <span class="na">ui</span> <span class="o">=</span> <span class="s">auto</span>
</span><span class='line'><span class="k">[alias]</span>
</span><span class='line'>  <span class="na">aa</span> <span class="o">=</span> <span class="s">add --all</span>
</span><span class='line'><span class="s">  ap = add --patch</span>
</span><span class='line'><span class="s">  ca = commit --amend</span>
</span><span class='line'><span class="s">  ci = commit -v</span>
</span><span class='line'><span class="s">  co = checkout</span>
</span><span class='line'><span class="s">  br = branch</span>
</span><span class='line'><span class="s">  create-branch = !sh -c &#39;git push origin HEAD:refs/heads/$1 &amp;&amp; git fetch origin &amp;&amp; git branch --track $1 origin/$1 &amp;&amp; cd . &amp;&amp; git checkout $1&#39; -</span>
</span><span class='line'><span class="s">  delete-branch = !sh -c &#39;git push origin :refs/heads/$1 &amp;&amp; git branch -D $1&#39; -</span>
</span><span class='line'><span class="s">  merge-branch = !git checkout master &amp;&amp; git merge @{-1}</span>
</span><span class='line'><span class="s">  pr = !hub pull-request</span>
</span><span class='line'><span class="s">  st = status</span>
</span><span class='line'><span class="s">  up = !git fetch origin &amp;&amp; git rebase origin/master</span>
</span><span class='line'><span class="k">[core]</span>
</span><span class='line'>  <span class="na">excludesfile</span> <span class="o">=</span> <span class="s">~/.gitignore</span>
</span><span class='line'><span class="s">  autocrlf = input</span>
</span><span class='line'><span class="k">[merge]</span>
</span><span class='line'>  <span class="na">ff</span> <span class="o">=</span> <span class="s">only</span>
</span><span class='line'><span class="k">[include]</span>
</span><span class='line'>  <span class="na">path</span> <span class="o">=</span> <span class="s">.gitconfig.local</span>
</span><span class='line'><span class="k">[commit]</span>
</span><span class='line'>  <span class="na">template</span> <span class="o">=</span> <span class="s">~/.gitmessage</span>
</span><span class='line'><span class="k">[fetch]</span>
</span><span class='line'>  <span class="na">prune</span> <span class="o">=</span> <span class="s">true</span>
</span><span class='line'><span class="k">[user]</span>
</span><span class='line'>  <span class="na">name</span> <span class="o">=</span> <span class="s">zgs225</span>
</span><span class='line'><span class="s">  email = zgs225@gmail.com</span>
</span><span class='line'><span class="k">[credential]</span>
</span><span class='line'>  <span class="na">helper</span> <span class="o">=</span> <span class="s">osxkeychain</span>
</span><span class='line'><span class="k">[github]</span>
</span><span class='line'>  <span class="na">user</span> <span class="o">=</span> <span class="s">zgs225</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (gitignore)</span> <a href='http://yuez.me/downloads/code/gitignore'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="o">*.</span><span class="vg">DS_Store</span>
</span><span class='line'><span class="o">*.</span><span class="vg">sw</span><span class="p">[</span><span class="vg">nop</span><span class="p">]</span>
</span><span class='line'><span class="o">.</span><span class="vg">bundle</span>
</span><span class='line'><span class="o">.</span><span class="vg">env</span>
</span><span class='line'><span class="vg">db</span><span class="o">/*.</span><span class="vg">sqlite3</span>
</span><span class='line'><span class="vg">log</span><span class="o">/*.</span><span class="vg">log</span>
</span><span class='line'><span class="vg">rerun</span><span class="o">.</span><span class="vg">txt</span>
</span><span class='line'><span class="vg">tags</span>
</span><span class='line'><span class="vg">tmp</span><span class="o">/**/*</span>
</span><span class='line'><span class="o">!</span><span class="vg">tmp</span><span class="o">/</span><span class="vg">cache</span><span class="o">/.</span><span class="vg">keep</span>
</span></code></pre></td></tr></table></div></figure>


<h4>自动集成 ternimal 环境</h4>

<p>感谢<code>thoughtbot</code>组织发布的<a href="https://github.com/thoughtbot/dotfiles">开源项目</a>，可
以轻松的完成上述配置。这是我fork项目的地址(<a href="https://github.com/zgs225/dotfiles">https://github.com/zgs225/dotfiles</a>)，
欢迎fork并完善成属于你自己的配置。</p>

<p>安装步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 更改为zsh, 详细参考上面zsh部分</span>
</span><span class='line'>chsh -s <span class="k">$(</span>which zsh<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># clone 源码</span>
</span><span class='line'>git clone https://github.com/zgs225/dotfiles.git
</span><span class='line'>
</span><span class='line'><span class="c"># 安装rcm</span>
</span><span class='line'>brew tap thoughtbot/formulae
</span><span class='line'>brew install rcm
</span><span class='line'>
</span><span class='line'><span class="c"># 安装上述环境并且完成配置</span>
</span><span class='line'>rcup -d dotfiles -x README.md -x LICENSE -x Brewfile
</span></code></pre></td></tr></table></div></figure>


<h2><i class="fa fa fa-language"></i> 语言篇</h2>

<p>编程语言五花八门，它们各自的版本也是万别千差。各种语言之间或多或少都存在着向前，
或者向后的不兼容。因为版本不兼容导致的bug也是格外的招人烦。所以，在语言篇这篇，也
是侧重与到编程语言版本管理已经环境控制。</p>

<h4>简洁优美的类Lisp语言 Ruby</h4>

<p>以Ruby作为语言篇的开篇，足以看得出来我对Ruby的喜爱。虽然它有着这样或者那样令人诟
病的缺点，不过作为让我体会到Web世界美妙的第一门语言，我对Ruby一直有着别样的感情。</p>

<p>目前，Ruby的常用版本是1.9，2.1和最新的2.2。最新版本并不是完全向后兼容，所以如果你
的电脑中存在着老版本的Ruby项目，这时候又想切换到新版本中来，那可就头疼了。好在，
有像<code>rvm</code>和<code>rbenv</code>这样的Ruby版本管理软件。它们各有优劣，而我喜欢更为自动化的rvm。</p>

<p>一个完整的Ruby环境包括Ruby解释器、安装的RubyGems以及它们的文档。rvm用<code>gemsets</code>的
概念，为每一个版本的Ruby提供一个独立的RubyGems环境。可以很方便的在不同的Ruby环境
中切换而不相互影响。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 安装rvm</span>
</span><span class='line'><span class="c"># 设置mpapis公钥</span>
</span><span class='line'>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
</span><span class='line'>
</span><span class='line'><span class="c"># 安装稳定版rvm</span>
</span><span class='line'><span class="se">\c</span>url -sSL https://get.rvm.io <span class="p">|</span> bash -s stable
</span></code></pre></td></tr></table></div></figure>


<p>由于网络原因，可以将rvm的Ruby安装源修改为国内淘宝的<a href="http://ruby.taobao.org">Ruby镜像服务器</a>。
该镜像服务器15分钟以此更新，尽量保证与官方同步。这样能提高安装速度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 出自 http://ruby.taobao.org</span>
</span><span class='line'>sed -i .bak <span class="s1">&#39;s!cache.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!&#39;</span> <span class="nv">$rvm_path</span>/config/db
</span></code></pre></td></tr></table></div></figure>


<p>推荐一篇关于rvm的文章: <a href="https://ruby-china.org/wiki/rvm-guide">https://ruby-china.org/wiki/rvm-guide</a></p>

<p>同样，由于网络原因，需要将RubyGems的安装源修改到镜像服务器上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 切换源</span>
</span><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a https://ruby.taobao.org/
</span><span class='line'>
</span><span class='line'><span class="c"># 查看源列表</span>
</span><span class='line'>gem sources -l
</span><span class='line'>
</span><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>https://rubygems.org/
</span></code></pre></td></tr></table></div></figure>


<p>以上，你就拥有了一个相对舒适的Ruby开发环境，不用为版本和网络问题发愁。啊！天空都
清净了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[团队小伙伴上第一财经]]></title>
    <link href="http://yuez.me/tuan-dui-xiao-huo-ban-shang-di-yi-cai-jing/"/>
    <updated>2015-03-27T11:43:57+08:00</updated>
    <id>http://yuez.me/tuan-dui-xiao-huo-ban-shang-di-yi-cai-jing</id>
    <content type="html"><![CDATA[<p><video  preload='metadata' controls ><source src='http://v2.yicai.com/newvideo/video/201503/26/55141f68-15af-04e3-443c-b0c7c362/transcode_50736195-6c28-756d-ee5f-0d6013fc.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>ps：貌似没看到我</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[She and Me]]></title>
    <link href="http://yuez.me/she-and-me/"/>
    <updated>2015-03-26T22:46:13+08:00</updated>
    <id>http://yuez.me/she-and-me</id>
    <content type="html"><![CDATA[<p><img class="lazy" data-original="/photos/520-she.jpg" width="640" height="200" title="'yuez blog - she'" alt="'yuez blog - she'">
<img class="lazy" data-original="/photos/520-me.jpg" width="640" height="200" title="'yuez blog - me'" alt="'yuez blog - me'"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Cache]]></title>
    <link href="http://yuez.me/http-cache/"/>
    <updated>2015-03-17T21:01:48+08:00</updated>
    <id>http://yuez.me/http-cache</id>
    <content type="html"><![CDATA[<p>使用缓存的优点：</p>

<ul>
<li>减少了冗余的数据传输</li>
<li>缓解了网络瓶颈</li>
<li>降低了对原始服务器的要求</li>
<li>降低了距离时延</li>
</ul>


<h3>再验证</h3>

<p>HTTP为我们提供了几个用来对已缓存对象进行再验证工具，但最常用的是
<code>If-Modified-Since</code>首部。</p>

<ul>
<li>再验证命中，返回<code>304 Not Modified</code>响应。</li>
<li>再验证未命中，服务器返回普通的，带有完整内容的<code>200 OK</code>响应。</li>
<li>对象被删除，返回<code>404 Not Found</code>响应。</li>
</ul>


<h3>缓存的处理步骤</h3>

<ol>
<li>接收——缓存从网络中读取抵达的请求报文。</li>
<li>解析——缓存对报文进行解析，提取出URL和各种首部。</li>
<li>查询——缓存查看是否有本地副本可用，如果没有，就获取一份副本（并将其保存在本
地）。</li>
<li>新鲜度检测——缓存查看已缓存的副本是否足够新鲜，如果不是，就询问服务器是否有
任何更新。</li>
<li>创建响应——缓存会用辛的首部和已缓存的主体来构建一条响应报文。</li>
<li>发送——缓存通过网络将响应发送回给客户端。</li>
<li>日志——缓存可选地创建一个日志文件条目来描述这个事务。</li>
</ol>


<h3>保持副本的新鲜度</h3>

<ul>
<li><strong>文档过期</strong>。通过特殊的HTTP <code>Cache-Control</code>首部和<code>Expires</code>首部。</li>
<li><strong>服务器再验证</strong>。HTTP定义了五个条件请求首部。对缓存再验证来说最有用的两个
首部是<code>If-Modified-Since</code>和<code>If-None-Match</code>。</li>
</ul>


<h3>控制缓存的能力</h3>

<p>服务器可以通过HTTP定义的几种方式来指定在文档过期之前可以将其缓存多长时间。</p>

<ul>
<li><code>Cache-Control: no-store</code></li>
<li><code>Cache-Control: no-cache</code></li>
<li><code>Cache-Control: must-revalidate</code></li>
<li><code>Cache-Control: max-age</code></li>
<li><code>Expires</code></li>
<li>不附加过期信息，让缓存确定自己的过期日期。</li>
</ul>


<h4>no-store和no-cache响应首部</h4>

<p>可以防止缓存提供未经证实的已缓存对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">Pragma:</span> <span class="nb">no</span><span class="o">-</span><span class="n">cache</span>
</span><span class='line'><span class="n">Cache</span><span class="o">-</span><span class="n">Control:</span> <span class="nb">no</span><span class="o">-</span><span class="n">store</span>
</span><span class='line'><span class="n">Cache</span><span class="o">-</span><span class="n">Control:</span> <span class="nb">no</span><span class="o">-</span><span class="n">cache</span>
</span></code></pre></td></tr></table></div></figure>


<h4>max-age响应首部</h4>

<p>表示从服务器将文档传输来之时起，可以认为此文档处于新鲜期的秒数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">Cache</span><span class="o">-</span><span class="n">Control:</span> <span class="n">max</span><span class="o">-</span><span class="n">age</span><span class="o">=</span><span class="mi">3600</span><span class="p">;</span>
</span><span class='line'><span class="n">Cache</span><span class="o">-</span><span class="n">Control:</span> <span class="n">s</span><span class="o">-</span><span class="n">maxage</span><span class="o">=</span><span class="mi">3600</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>将最大使用期限设置为0则不进行缓存。</p>

<h4>Expires响应首部</h4>

<p>不推荐使用。</p>

<h4>must-revalidate响应首部</h4>

<p>在事先没有跟原始服务器进行再验证的情况下，不能提供这个对象陈旧的副本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">Cache</span><span class="o">-</span><span class="n">Control:</span> <span class="n">must</span><span class="o">-</span><span class="n">revalidate</span>
</span></code></pre></td></tr></table></div></figure>


<h4>试探性过期</h4>

<p>如果响应中没有<code>Cache-Control: max-age</code>首部，也没有<code>Exprires</code>首部，缓存可以计
算出一个试探性最大使用期。可以使用任意算法，如果得到的最大使用期大于24小时,
就应该向响应首部添加一个Heuristic Expiration Warning首部。</p>

<p>LM-Factor算法是一种常用的试探性过期算法，如果文档中包含了最后修改日期，就可以
使用这种算法。算法逻辑如下：</p>

<ul>
<li><p>如果已缓存的文档最后一次修改发生在很久以前，它可能会是一份稳定的文档，不太
会突然发生变化，因此将其继续保存在缓存中会比较安全。</p></li>
<li><p>如果已缓存的文档最近被修改过，就说明它很可能会频繁地发生变化，因此在与服务
器进行再验证之前，只应该将其缓存很短的一段时间。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$time_since_modify</span>      <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$server_Date</span> <span class="o">-</span> <span class="nv">$server_Last_Modified</span><span class="p">);</span>
</span><span class='line'><span class="nv">$server_freshness_limit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nv">$time_since_modify</span> <span class="o">*</span> <span class="nv">$lm_factor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置缓存控制</h3>

<p>Apache Web服务器提供了几种设置HTTP缓存控制首部的机制。其中很多机制在默认情况
下都没有启动。</p>

<ul>
<li>mod_headers</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;Files</span> <span class="s">*.html</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Header</span> set Cache-control no-cache
</span><span class='line'><span class="nt">&lt;/Files&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>mod_expires</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">ExpiresDefault</span> <span class="n">A3600</span>
</span><span class='line'><span class="n">ExpiresDefault</span> <span class="n">M86400</span>
</span><span class='line'><span class="n">ExpiresDefault</span> <span class="s">&quot;access plus 1 week&quot;</span>
</span><span class='line'><span class="n">ExpiresByType</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span> <span class="s">&quot;modification plus 2 days 6 hours 12 minutes&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>mod_cern_meta</li>
</ul>


<h4>通过HTTP-EQUIV控制HTML缓存</h4>

<p>为了让作者在无需与Web服务器的配置文件进行交互的情况下，能够更容易地为所提供的
HTML文档分配HTTP首部信息，HTML2.0定义了<code>&lt;META HTTP-EQUIV&gt;</code>标签。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>My document<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;cache-control&quot;</span> <span class="na">content=</span><span class="s">&quot;no-cache&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>详细算法</h3>

<p>对HTTP的新鲜度计算算法进行详细的讨论，并对此算法动机进行解释。</p>

<h4>使用期和新鲜生存期</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$is_fresh_enough</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$age</span> <span class="o">&lt;</span> <span class="nv">$freshness_lifetime</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用期的计算</h4>

<p>响应的使用期就是服务器发布响应（活服务器对其进行了再验证）之后经过的总时间。</p>

<figure class='code'><figcaption><span>使用期计算的伪代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 使用期计算的伪代码</span>
</span><span class='line'><span class="nv">$apparent_age</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$time_got_response</span> <span class="o">-</span> <span class="nv">$Date_header_value</span><span class="p">);</span>
</span><span class='line'><span class="nv">$corrected_apparent_age</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="nv">$apparent_age</span><span class="p">,</span> <span class="nv">$Age_header_value</span><span class="p">);</span>
</span><span class='line'><span class="nv">$response_delay_estimate</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$time_got_response</span> <span class="o">-</span> <span class="nv">$time_issued_request</span><span class="p">);</span>
</span><span class='line'><span class="nv">$age_when_document_arrived_at_our_cache</span> <span class="o">=</span>
</span><span class='line'>    <span class="nv">$correncted_apparent_age</span> <span class="o">+</span> <span class="nv">$response_delay_estimeate</span><span class="p">;</span>
</span><span class='line'><span class="nv">$how_long_copy_has_been_in_our_cache</span> <span class="o">=</span>
</span><span class='line'>    <span class="nv">$current_time</span> <span class="o">-</span> <span class="nv">$time_got_response</span><span class="p">;</span>
</span><span class='line'><span class="nv">$age</span> <span class="o">=</span> <span class="nv">$age_when_document_arrived_at_our_cache</span> <span class="o">+</span>
</span><span class='line'>    <span class="nv">$how_long_copy_has_been_in_our_cache</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>完整的服务器新鲜度算法</h4>

<figure class='code'><figcaption><span>服务器新鲜度限制计算算法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">## 服务器新鲜度限制的计算</span>
</span><span class='line'><span class="k">sub </span><span class="nf">server_freshness_limit</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">local</span><span class="p">(</span><span class="nv">$heuristic</span><span class="p">,</span> <span class="nv">$server_freshness_limit</span><span class="p">,</span> <span class="nv">$time_since_last_modify</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$heuristic</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$Max_Age_value_set</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$server_freshness_limit</span> <span class="o">=</span> <span class="nv">$Max_Age_value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">elseif</span> <span class="p">(</span><span class="nv">$Expires_value_set</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$server_freshness_limit</span> <span class="o">=</span> <span class="nv">$Expires_value</span> <span class="o">-</span> <span class="nv">$Date_value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">elseif</span> <span class="p">(</span><span class="nv">$Last_Modified_value_set</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$time_since_last_modify</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$Date_value</span> <span class="o">-</span> <span class="nv">$Last_Modified_value</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$server_freshness_limit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nv">$time_since_last_modify</span> <span class="o">*</span> <span class="n">lm_factor</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$heuristic</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$server_freshness_limit</span> <span class="o">=</span> <span class="nv">$default_cache_min_lifetime</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$heuristic</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$heuristic</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$server_freshness_limit</span> <span class="o">&gt;</span> <span class="nv">$default_cache_max_lifetime</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$server_fresh_limit</span> <span class="o">=</span> <span class="nv">$default_cache_max_lifetime</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$server_freshness_limit</span> <span class="o">&lt;</span> <span class="nv">$default_cache_min_lifetime</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$server_fresh_limit</span> <span class="o">=</span> <span class="nv">$default_cache_min_lifetime</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nv">$server_freshness_limit</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## 客户端新鲜度限制的计算</span>
</span><span class='line'><span class="k">sub </span><span class="nf">client_modified_freshness_limit</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$age_limit</span> <span class="o">=</span> <span class="n">server_freshness_limit</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$Max_Stale_value_set</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$Max_Stale_value</span> <span class="o">==</span> <span class="nv">$INT_MAX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$age_limit</span> <span class="o">=</span> <span class="nv">$INT_MAX</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$age_limit</span> <span class="o">=</span> <span class="n">server_freshness_limit</span><span class="p">()</span> <span class="o">+</span> <span class="nv">$Max_Stale_value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$Min_Fresh_value_set</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$age_limit</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="nv">$age_limit</span><span class="p">,</span> <span class="n">server_freshness_limit</span><span class="p">()</span> <span class="o">-</span>
</span><span class='line'>        <span class="nv">$Min_Fresh_value_set</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$Max_Age_value_set</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$age_limit</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="nv">$age_limit</span><span class="p">,</span> <span class="nv">$Max_Age_value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成都金夫人从零部署记录]]></title>
    <link href="http://yuez.me/cheng-du-jin-fu-ren-cong-ling-bu-shu-ji-lu/"/>
    <updated>2014-12-02T09:48:59+08:00</updated>
    <id>http://yuez.me/cheng-du-jin-fu-ren-cong-ling-bu-shu-ji-lu</id>
    <content type="html"><![CDATA[<p>成都金夫人香港服务器需要部署网站，记录整个服务器搭建的全部流程，涉及安全、用户、
系统等综合性管理。</p>

<p><strong>Task List</strong></p>

<ul>
<li>添加部署用户</li>
<li>禁止root用户登录</li>
<li>网站部署</li>
<li>防火墙</li>
<li>FTP功能</li>
</ul>


<h2>用户管理</h2>

<p>建立<code>deployment</code>用户组，负责项目部署；并且在<code>sudoers</code>文件中添加组<code>deployment</code>为管
理员组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>useradd deployment
</span><span class='line'>
</span><span class='line'><span class="c"># In /etc/sudoers</span>
</span><span class='line'><span class="c"># Allows people in group deployment to run all commands</span>
</span><span class='line'>%deployment <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> ALL
</span></code></pre></td></tr></table></div></figure>


<p>禁用<code>root</code>用户远程登录系统</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># In /etc/ssh/sshd_config</span>
</span><span class='line'>PermitRootLogin no
</span></code></pre></td></tr></table></div></figure>


<h2>服务器环境搭建</h2>

<ul>
<li><p>安装<code>lnmp</code>（Linux + Nginx + Mysql + PHP）</p>

<blockquote><p>参考 <a href="http://lnmp.org">LNMP</a>,
<a href="http://www.vpser.net/manage/lnmp-upgrade-php-script.html">PHP升级</a></p></blockquote></li>
<li><p>安装<code>git</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置PHP</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c1"># php.ini 添加或者修改配置</span>
</span><span class='line'><span class="na">max_post_size</span> <span class="o">=</span> <span class="s">300M</span>
</span><span class='line'><span class="na">file_upload_size</span> <span class="o">=</span> <span class="s">300M</span>
</span><span class='line'><span class="na">extension</span> <span class="o">=</span> <span class="s">fileinfo.so</span>
</span><span class='line'><span class="na">disable_functions</span> <span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>源码迁移与数据库迁移</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 源码迁移</span>
</span><span class='line'>zip -r project /path/to/project
</span><span class='line'>unzip /path/to/source -d /path/to/destination
</span><span class='line'>
</span><span class='line'><span class="c"># 数据库迁移</span>
</span><span class='line'>mysqldump -u username -p db_name &gt; db_name.sql
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置Nginx</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="c1"># default.conf</span>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span> <span class="mi">80</span> <span class="s">default</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">_</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">set</span> <span class="nv">$root_path</span> <span class="s">&#39;/bjdata/bj/golden_ladies/public&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">root</span> <span class="nv">$root_path</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">index</span> <span class="s">index.php</span> <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">/index.php</span><span class="nv">$is_args$args</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Removes trailing slashes</span>
</span><span class='line'>  <span class="kn">if</span> <span class="s">(!-d</span> <span class="nv">$request_filename</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">rewrite</span> <span class="s">^/(.+)/</span>$ <span class="s">/</span><span class="nv">$1</span> <span class="s">permanent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Rewrite to index.php unless the request is for an existing file</span>
</span><span class='line'>  <span class="kn">(image,</span> <span class="s">js,</span>
</span><span class='line'><span class="c1"># css, etc.)</span>
</span><span class='line'>    <span class="s">if</span> <span class="s">(!-e</span> <span class="nv">$request_filename</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">rewrite</span> <span class="s">^/(.*)</span>$ <span class="s">/index.php?/</span><span class="nv">$1</span> <span class="s">last</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">error_page</span> <span class="mi">404</span>  <span class="s">/404.html</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">location</span> <span class="p">=</span> <span class="s">/404.html</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/bjdata/error_pages/</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">error_page</span> <span class="mi">500</span> <span class="mi">502</span> <span class="mi">503</span> <span class="mi">504</span> <span class="s">/500.html</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">location</span> <span class="p">=</span> <span class="s">/500.html</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/bjdata/error_pages/</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php$</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="s">/index.php</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+\.php)(/.+)</span>$<span class="p">;</span>
</span><span class='line'><span class="c1"># fastcgi_pass unix:/var/run/php5-fpm.sock;</span>
</span><span class='line'>    <span class="kn">fastcgi_pass</span> <span class="s">unix:/tmp/php-cgi.sock</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># deny access to .htaccess files, if Apache&#39;s document root</span>
</span><span class='line'><span class="c1"># concurs with nginx&#39;s one</span>
</span><span class='line'>  <span class="kn">location</span> <span class="p">~</span> <span class="sr">/\.ht</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">deny</span> <span class="s">all</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">access_log</span> <span class="s">/var/log/nginx/www.cdjfr.com.log</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">error_log</span>  <span class="s">/var/log/nginx/www.cdjfr.com.error.log</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Meta Programming in Ruby]]></title>
    <link href="http://yuez.me/the-meta-programming-in-ruby/"/>
    <updated>2014-11-06T10:05:34+08:00</updated>
    <id>http://yuez.me/the-meta-programming-in-ruby</id>
    <content type="html"><![CDATA[<p>The machine could be used to create new programming that
it could then execute. And that would be meta programming
&ndash;writing code that writes code.</p>

<h2>Base</h2>

<p>The basement of meta programming.</p>

<h3>Objects and Classes</h3>

<p>In reality, however, Ruby has just a single underline
class and object structure.</p>

<p>A Ruby object has three components: a set of flags, some
instance variables, and an associated class.</p>

<h4>self and Method calling</h4>

<p><code>self</code> has two significant roles in running Ruby program.</p>

<ul>
<li><code>self</code> control how Ruby finds instance variables.</li>
<li><code>self</code> plays a vital role in method calling. If there
is no explicit reciever, Ruby uses <code>self</code> as default
reciever.</li>
</ul>


<p>Inside a class definition, <code>self</code> is set to the class
object of the class being defined.</p>

<h4>Singletons</h4>

<p>Ruby lets you define methods that are specific to a
particular object. These are called <code>singleton methods</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="s1">&#39;cat&#39;</span>
</span><span class='line'><span class="k">def</span> <span class="nc">animal</span><span class="o">.</span><span class="nf">speak</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;The </span><span class="si">#{</span> <span class="nb">self</span> <span class="si">}</span><span class="s2"> says miaow.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">speak</span> <span class="c1"># =&gt; &quot;The animal says miaow.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we defined singleton method for the <code>animal</code> object，
Ruby create a new anonymous class and defined the <code>speak</code>.</p>

<h4>Singletons and Classes</h4>

<p>Newcomers to Ruby commonly make the mistake of setting
instance variables inline in the class definition and
then attempting to access these variables from instance
methods.</p>

<p><strong>Instance variables defined in the class body are
associated with the class object, not the instance
of the class.</strong></p>

<h4>Another way to access the singleton class</h4>

<p>You can do the same thing Ruby&rsquo;s Class &lt;&lt; an_object
notation.</p>

<p>You can&rsquo;t create a new instance of a singleton class.</p>

<p>To make <code>attr_accessor</code> work with class level instance
variables, you must have to invoke <code>attr_accessor</code> in
singleton class.</p>

<h4>Inheritance and Visibility</h4>

<p>Within a class definition, you can change the visibility
of a method in an ancestor class.</p>

<p>If a subclass changes the visibility of a method in a
parent, Ruby effectively inserts a hidden proxy method in
the subclass that invoke the original method using
<code>super</code>.</p>

<p>The call of <code>super</code> can access the parent&rsquo;s methods
regardless of its visibility.</p>

<h3>Modules and Mixins</h3>

<p>The module that you include is effectively added as a
superclass of the class being defined.</p>

<p>When you include a module in class <code>Example</code>, Ruby Constructs
a new class object, makes it the superclass of <code>Example</code>,
and then set the superclass of the new class to be the
original superclass of <code>Example</code>.</p>

<p>Ruby will include a module only <strong>once</strong> in a
inheritance chain.</p>

<h4>prepend</h4>

<blockquote><p>New feature in 2.0</p></blockquote>

<p>If a method inside a prepended module has the same name
as one in the original class, it will be invoked instead
of the original. The prepended module can then call the
original using <code>super</code>.</p>

<h4>extend</h4>

<p>Add the instance methods to a particular object.If you
use it in a class definition, the module&rsquo;s methods
become class methods.</p>

<h4>Refinements</h4>

<blockquote><p>New feature in 2.0</p></blockquote>

<p>A refinement is a way of packaging a set of changes to
one or more classes. These refinements are defined
within a module.</p>

<h3>Meta programming Class-Level Macros</h3>

<p>Because of the way they expand into something bigger,
folks sometimes call these kinds of methods <code>macros</code>.</p>

<p>A <code>class method</code> is defined in the class object&rsquo;s
singleton class. That means we can call it later in the
class definition without an explicit receiver.</p>

<p>Use <code>define_method</code> to define a log method on the fly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Logger</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_logging</span><span class="p">(</span><span class="n">id_string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="ss">:log</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>      <span class="n">now</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%H:%M:%S&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span> <span class="n">now</span> <span class="si">}</span><span class="s2">-</span><span class="si">#{</span> <span class="n">id_string</span> <span class="si">}</span><span class="s2">: </span><span class="si">#{</span> <span class="nb">self</span> <span class="si">}</span><span class="s2"> </span><span class="si">#{</span> <span class="n">msg</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Song</span> <span class="o">&lt;</span> <span class="no">Logger</span>
</span><span class='line'>  <span class="n">add_logging</span><span class="p">(</span><span class="s1">&#39;Tune&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As well as passing parameters from the class method into
the body of the method being defined, we can also use
the parameter to determine the name of the method or
methods to create.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AttrLogger</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">attr_logger</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="nb">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">=&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Assigning </span><span class="si">#{</span> <span class="n">val</span><span class="o">.</span><span class="n">inspect</span> <span class="si">}</span><span class="s2"> to </span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We use <code>instance_variable_set</code> to set the value of an
instance variable. There&rsquo;s a corresponding <code>_get</code> method
that fetches the value of a named instance variable.</p>

<h4>Class Methods And Modules</h4>

<p>You can use module to hold your meta programming
implementation. In this case, using <code>extend</code> inside a
class definition will add the methods in a module as
class methods to the class being defined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">AttrLogger</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attr_logger</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="nb">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;@</span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Assigning </span><span class="si">#{</span> <span class="n">val</span><span class="o">.</span><span class="n">inspect</span> <span class="si">}</span><span class="s2">&quot;</span> <span class="n">to</span> <span class="c1">#{ name }</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span> <span class="s2">&quot;@</span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Example</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">AttrLogger</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_logger</span> <span class="ss">:value</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s one technique, make us to add both class methods
and instance methods into the class being defined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">GeneralLogger</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">attr_logger</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">attr_reader</span> <span class="nb">name</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Assigning </span><span class="si">#{</span> <span class="n">val</span><span class="o">.</span><span class="n">inspect</span> <span class="si">}</span><span class="s2"> to </span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span> <span class="s2">&quot;@</span><span class="si">#{</span> <span class="nb">name</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d %H:%M:%S &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">receiver</span><span class="p">)</span>
</span><span class='line'>    <span class="n">receiver</span><span class="o">.</span><span class="n">extend</span>         <span class="no">ClassMethods</span>
</span><span class='line'>    <span class="n">receiver</span><span class="o">.</span><span class="n">send</span> <span class="ss">:include</span><span class="p">,</span> <span class="no">InstanceMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Example</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">GeneralLogger</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_logger</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ex</span> <span class="o">=</span> <span class="no">Example</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ex</span><span class="o">.</span><span class="n">log</span> <span class="s2">&quot;A new Example created.&quot;</span>
</span><span class='line'><span class="c1"># =&gt; 2014-10-31 08:56:56 A new Example created.</span>
</span><span class='line'>
</span><span class='line'><span class="n">ex</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Yuez&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Assigning &quot;Yuez&quot; to name</span>
</span><span class='line'>
</span><span class='line'><span class="n">ex</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Lucky&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Assigning &quot;Lucky&quot; to name</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating Singleton Class</h4>

<p>Use <code>Class#new</code> directly to create a singleton class. By
default this class will be direct decendent of <code>Object</code>.
You can give them a different parent by passing the
parent&rsquo;s class as a parameter.</p>

<h3>instance_eval and class_eval</h3>

<ul>
<li><code>Object#instance_eval</code></li>
<li><code>Module#class_eval</code></li>
<li><code>Module#module_eval</code></li>
</ul>


<p><code>instance_eval</code> and <code>class_eval</code> both set <code>self</code> for the
duration of the block. However, they differ in the way
they set up the environment for method definition.
<code>class_eval</code> sets things up as if you were in the body
of a class definition.</p>

<p>In contrast, calling <code>instance_eval</code> on a class acts as
if you were working inside the singleton class of <code>self</code></p>

<p>Ruby has variants of these methods.</p>

<ul>
<li><code>Object#instance_exec</code></li>
<li><code>Module#class_exec</code></li>
<li><code>Module#module_exec</code></li>
</ul>


<p>behave identically to there <code>_eval</code> counterparts but take
only a block(they do not take a string).</p>

<h3>Hook Methods</h3>

<p><code>included</code> is an example of a <em>hood method</em> (sometime
  called a <em>callback</em>). A hook method is a method that
  you write but that Ruby calls from within the interpreter
  when some particular events occurs.</p>

<p>  The interpreter looks for these methods by name&ndash;if
  you define a method in the right context with an
  appropriate name, Ruby will call it when the corresponding
  event happens.</p>

<p>  The methods that can be invoked from within the
  interpreter are:</p>

<ul>
<li><p>Method related hooks.</p>

<p><code>method_added</code>, <code>method_missing</code>,  <code>method_removed</code>,
<code>method_undefined</code>, <code>singleton_method_added</code>,
<code>singleton_method_removed</code>, <code>singleton_method_undefined</code></p></li>
<li><p>Class and module related hooks.</p>

<p><code>append_features</code>, <code>const_missing</code>, <code>extend_object</code>,
<code>extended</code>, <code>included</code>, <code>inherited</code>,
<code>initialize_clone</code>, <code>initialize_coty</code>,
<code>initialize_dup</code></p></li>
<li><p>Object marshaling hooks.</p>

<p><code>marshal_dump</code>, <code>marshal_load</code></p></li>
<li><p>Coercion hooks.</p>

<p><code>coerce</code>, <code>included_from</code>, <code>to_xxx</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[君子固有穷乎?]]></title>
    <link href="http://yuez.me/jun-zi-gu-you-qiong-hu/"/>
    <updated>2014-07-27T08:56:43+08:00</updated>
    <id>http://yuez.me/jun-zi-gu-you-qiong-hu</id>
    <content type="html"><![CDATA[<blockquote><p>匪兕匪虎 率彼旷野</p></blockquote>

<p>“那人在外面不就成了野人吗？”耳边是江河文青特有的幽默，让我想起先贤孔子的
感慨：“吾等既非野牛，也非猛虎，何以不得不彷徨原野？”</p>

<p>孔子，子路，颜回，子贡师徒一行，坐道陈都三载。不料吴楚二国，以陈地为战场，
一决雌雄。虽非所愿，可是陈都必然将无逃避之途，是故，孔子一行即日离开陈都，
前往楚地。</p>

<p>孰料，一行人于野地宿营时，遭吴残兵败部所袭，夺取马车及车上所载粮食。此番
逃离陈都之行，已有无法描述的险阻艰辛。如此饿着肚腹，蹒跚前进。路途间或分
得一些陈兵粮食，然而也是所得有限，一经平分，根本无济于事。到了不知第八天
还是第九天，不折不扣成为了游魂的一行人，挣扎到了某个村落，再也动弹不得。</p>

<p>此时，子路突然趟步走到夫子跟前，掷出一句：</p>

<p>“君子亦有穷乎？”</p>

<p>看似子路真的生气了，如若就此饿死，那么过往所做何为？</p>

<p>“君子亦有穷乎？”子路复问一句。</p>

<p>夫子转向子路，言道：“君子固穷，小人穷斯滥矣。”声音强而有力。</p>

<blockquote><p>君子固穷 小人穷斯滥矣</p></blockquote>

<p>小人一旦陷入窘境，就会动摇心智，无法约束自己。君子却是再如何窘迫，也不至于
动摇心智。</p>

<p>这一番经历与马浩汉、江河、胡说一行人的平凡之路，再相似不过了。</p>

<p>马浩汉振兴东极村旅游业失败之后，为送江河到西极某地执教，一行三人，收拾行囊，
驱车离开家乡。三人决定，先是看望青梅竹马的周沫，继而寻找与马浩汉书信互往
十多年的笔友刘莺莺，最后再前往西极。第一个令我心有感触之地，便是周沫送别马浩汉
一幕。</p>

<p>周沫是一名替身演员，遵着“小城市的人都是凭借着关系，大城市里或多或少更公平一些”
的信念，在演员一行中摸爬滚打。见到周沫，几番寒暄，终是送别之际来临。如若没有
记错的话，应是长桥送别。道别之后，周沫行到片场，这次她饰演的是被日本兵枪决
的知情少女，“轰”得一声枪响，这是对马浩汉行程至此的终结，也是对借来下行程
艰难的伏笔。而这意味深藏的一幕——因为送别之后,他们将面临的是</p>

<blockquote><p>波涛汹涌，充满荒谬与悖论的成人世界。</p></blockquote>

<p>——却被故意设定为马浩汉以为听到的枪声是车胎
破裂，从而下车没头没脑检查，随即演员中一片笑声。这一定又是文青式的幽默——
刻意设计笑点，将哲理隐藏在幽默中——或许是为了避免“太矫情”。文绉绉的台词
不如藏起来好了。</p>

<p>于此之后，直到阿吕登场，剧情有些起色。而在周沫后，阿吕前所经历两件事，
一是“真老师嫖娼不成反被追，假妓女斗智斗勇为讹钱。”，二是马浩汉初见刘
莺莺，俱是故事平常，人物平庸，刘莺莺一句心灵鸡汤：“喜欢就会放肆，爱就
是克制”，更是将我雷到不行。所幸，阿吕是一位性格丰满的骗子。</p>

<p>马浩汉和江河是在迷路后偶遇阿吕的。你问胡说？胡说在开场五分钟后便已宣告
该角色杀青。阿吕原本在一座小镇上经营一家摩托车修理店，为了不被昔日同窗
小觑，也为了吸引女神注意，他做出小镇上从来没有过的壮举——摩托车骑行中国。
他成功了，虽然没能得到同窗的尊重，却是赢得了女神的爱情，正如阿吕自己所说：“
有时，你想证明给一万个人看，最终只得到了一个人的关注，这就够了。”好景不长，
不去经年，便在一场雨夜骑行中，与妻子阴阳两隔。此后每年，阿吕都会重走与
妻子的路，以此祭奠。碰到马浩汉两人时，已是第六个年头。</p>

<p>至此，故事与孔子一行的经历更相似了。</p>

<p>阿吕随即与二人同行。</p>

<p>一路之上，阿吕时而追忆陈年往事，时而豪迈放声歌唱；在谈及妻子时是那么真诚，
在宿营地，激励二人真是鼓舞人心。然而，孰真孰假？阿吕就是村上春树笔下的成
人世界吧，充满荒谬与悖论的成人世界。</p>

<blockquote><p>我并不怕被欺骗，我怕的是我刚刚信任一个人，就被欺骗。</p></blockquote>

<p>诚如马浩汉所言，辅一得到信任，阿吕便拉勾收网，将这一份情谊以车价贱卖。
或许，本就没有什么情谊，或许，阿吕便是孔子口中的小人，或许，不是在这
种环境下他们真的能拥有情谊。</p>

<blockquote><p>狗的寿命只有十四年，但是比情谊长。</p></blockquote>

<p>所幸，马浩汉二人并没有到山穷水尽的地步，阿吕在开走车时，尚且将他们的
行李留下，还有那条代表情谊的阿拉斯加犬。这时的二人，应是到了比绝境也
好不了多少的地步。令人起敬的是，马浩汉口中仍是念念不忘事业，江河更是
从始至终都没有过动摇。正如他们二人的名字，浩汉江河，奔流到海不复回。
二人收拾行李，复又上路，这次他们用步行走完这最后的平凡之路。最终，二
人在西极之地的山坡前分别。</p>

<p>故事就此结束，无论如何，我认为故事就此结束。</p>

<h3>三分未满</h3>

<p>洋洋洒洒许多字，看的人头晕脑胀，还是直接给一个评分吧，清晰明了。</p>

<p>若以十分满计，至西极前我给四分，结尾给一分，平均一下，二点五分，我姑
且算是韩寒半个读者，再加零点五分，最后我给出的得分是三分。缘何会如此
之低？</p>

<p>一段并不精彩的故事，一位并不高明的讲故事人，中间穿杂着一些并不符合人
物身份的心灵鸡汤， 配上突兀生硬的结局，三分可能已经很多了。</p>

<blockquote><p>不想写了，先到这里吧。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搜索引擎优化要点]]></title>
    <link href="http://yuez.me/sou-suo-yin-qing-you-hua-yao-dian/"/>
    <updated>2014-07-27T08:50:09+08:00</updated>
    <id>http://yuez.me/sou-suo-yin-qing-you-hua-yao-dian</id>
    <content type="html"><![CDATA[<blockquote><p>本文翻译自<a href="http://www.clickminded.com/seo-checklist/">SEO CHECKLIST</a>。
欢迎各位在<a href="https://github.com/zgs225/SEO-CHECKLIST.git">Github</a>上或者留言中指正错误。</p></blockquote>

<p>每次开始新的网站工作时，为了搭建SEO基础，我发现我总是在一遍一遍做同样的事情。
令人啼笑皆非的是，我最初写这个SEO要点只是为了我个人的SEO练习，现在却以“SEO
 Checklist”为关键字，每天获得数百的访问者。</p>

<p>为了让新网站在搜索引擎中生存下来，这些要点覆盖了三十条你最需要考虑的事情。
这些要点已经为2013年搜索引擎做了更新。我使用了一个简单的脚本去告诉你所有
需要核对的要点。</p>

<p>在你踏上SEO旅程之前，有一件事情我要重申：在页面优化中，最好的思路就是
<strong>增量受益</strong>（原文是incrementally beneficial，不知道怎么翻译。）
人们经常会范的一个大错误，当他们找到一个要点清单，他们就严格执行其中的
每一条，他们认真地一行一行读每一个要点，还不时发出：“我的天！这条我没做！
我的搜索排名工作全毁了。”我想，这不是你思考SEO的方式。</p>

<p>如果你能做到下面每一条，那真正儿是极好了（雪姨状）！如果你做到了其中的大
部分，你也非常棒。但是，通常情况下，如果你想让你的网站对SEO更加友好，你
大可不必完全按照下面的要点来做。这就是说，做你认为最应该做的事情。</p>

<h2>2014 SEO CHECKLIST</h2>

<blockquote><p>勾选你已经完成的条目。请不要关闭本页面，否则你勾选的条目会重新变成未
勾选状态。</p>

<p>这些事项，不一定满足你的网站需求。</p></blockquote>

<ul>
<li><p><input type="checkbox"> 你有为你的网站创建一个google帐号和邮
箱吗？这不是必须要做的，但是做这件事情很容易。</p></li>
<li><p><input type="checkbox"> 你有在你的网站中集成
<a href="http://www.google.com/analytics/">Google Analytics</a>
吗？这个是<strong>必须</strong>要做的！</p></li>
<li><p><input type="checkbox"> 你有在你的网站中安装
<a href="http://www.google.com/webmasters/">Google Webmaster Tools</a>
吗？这也是<strong>必做</strong>的。</p></li>
<li><p><input type="checkbox"> 同样的，也请在你的网站中安装
<a href="http://www.bing.com/toolbox/webmaster/">Bing Webmaster Tools</a>。</p></li>
<li><p><input type="checkbox"> 使用了<code>WordPress</code>？那么请在你的网站安装
<a href="http://yoast.com/wordpress/google-analytics/">Google Analytics for WordPress</a>
和
<a href="http://yoast.com/wordpress/seo/">SEO for WordPress</a>，
这些会让你的工作轻松一百倍啊一百倍。</p></li>
<li><p><input type="checkbox"> 你有检查过Google Webmaster Tools发送
给你的，关于404、500错误，重复的内容，缺少标题或者其他技术型错误的消息吗？
请仔细查看Google发送给你的每一条消息。</p></li>
<li><p><input type="checkbox"> 你有使用<a href="http://www.browseo.net/">Browseo</a>
去发现更多的技术错误吗？通常，对人们有害的错误还包括301，302重定向。</p></li>
<li><p><input type="checkbox">
你有使用<a href="http://home.snafu.de/tilman/xenulink.html">Xemu</a>
去检查已经失效的链接吗？它是免费而且易用的工具。</p></li>
<li><p><input type="checkbox"> 你有使用<a href="https://adwords.google.com/KeywordPlanner">Google Keyword Research
Tool</a>
吗？请认真思考搜索者会使用的关键字，为每个页面选择一个关键词。刚开始，
你应该选择一些低容量(low-volume，不知如何翻译)词。</p></li>
<li><p><input type="checkbox"> 你有看过竞争对手的链接概况吗？这是你构建
链接时最有效的方式。这样，你可以知道他们在链接中使用了哪些文字，同时，
你也知道了如何获取并且在哪里获取他们的链接。在
<a href="http://www.linkdiagnosis.com">Link Diagnosis</a>,
<a href="http://www.opensiteexplorer.org/">Open Site Explorer</a>,
<a href="http://ahrefs.com/">Ahrefs</a>,
<a href="http://www.majesticseo.com/">Majestic SEO</a>,
<a href="http://links.lipperhey.com/">LipperHey</a>
中输入竞争对手的域名。</p></li>
<li><p><input type="checkbox"> 你有为你的每一个页面设置关键词吗？</p></li>
<li><p><input type="checkbox"> 所有的页面标题少于65个字符吗？多余的
字符会被搜索引擎截断。</p></li>
<li><p><input type="checkbox"> 所有的<code>&lt;meta description&gt;</code>信息在
155个字符以内吗？多余长度的字符会被搜索引擎截断。</p></li>
<li><p><input type="checkbox"> 你使用了<code>h1</code>标签吗？你的关键词在这个
标签里面吗？这个标签是否在所有<code>h2, h3...</code>之前？你是否只使用了
<code>h1</code>标签？</p></li>
<li><p><input type="checkbox"> 你的网站上是否有一个良好的，字数足够的
搜索引擎访问文本？我建议这个文本至少100个词以上，因为你需要给搜索
引擎一个机会去理解你的页面的主旨是什么。为了保证排名，请永远不要在你
的网站中添加不重要的文本，但是我不建议你为这些不重要的文本创建一个新的
页面，除非这个文本含有超过100个有价值的词语。</p></li>
<li><p><input type="checkbox"> 你使用了同义词吗？记住：同义词非常好用。
使用关键词的同义词是非常推荐的。</p></li>
<li><p><input type="checkbox"> 你在你的<code>img</code>标签中添加了描述性的
<code>alt</code>属性和文件名了吗？搜索引擎是通过读<code>alt</code>属性和文件名称去发现
图片的。试着为你的图片做描述性命名，但是<strong>不要做的太过</strong>。</p></li>
<li><p><input type="checkbox"> 你使用SEO优化的方式去链接你的页面了吗？
你有使你的链接语义化吗？这样用户和搜索引擎都能明白你的页面是关于什么的。
我<strong>不建议</strong>你把全局导航的链接也语义化，这样看起来像是过度优化。请只对
内容页面链接做语义化。</p></li>
<li><p><input type="checkbox"> 你有过放下页面优化，开始构造你的链接吗？
这是SEO一个非常困难但是非常重要的方面。看这篇文章
<a href="http://www.clickminded.com/link-building-101-handbook/">ClickMinded Link Building Strategy
Guide</a>
，开始构建你的链接。</p></li>
<li><p><input type="checkbox"> 你能确认你的网站上没有任何重复的内容吗？
利用301跳转，规范的标签或者Google站长工具去修复重复内容可能被重复
索引，从而给你的网站带来的损失。</p></li>
<li><p><input type="checkbox"> 你是在你的代码中的链接使用的绝对路径吗？
一些CMS管理系统会提供这个选项，使用绝对路径去代替相对路径。</p></li>
<li><p><input type="checkbox"> 你是否使用了
<a href="https://developers.google.com/speed/pagespeed/">Google Page Speed Tools</a>
为你的网站加速？</p></li>
<li><p><input type="checkbox"> 你是否为你的网站创建了一个<code>SiteMap</code>
xml文件，并且提交给了Google, Bing的站长工具？使用
<a href="http://www.xml-sitemaps.com/">XML-Sitemaps.com</a>,
<a href="http://wordpress.org/extend/plugins/google-sitemap-generator/"> Google XML Sitemaps WordPress
Plugin</a>.</p></li>
<li><p><input type="checkbox"> 你是否创建了一个<code>robot.txt</code>文件，
并且将它提交给了Google, Bing的站长工具。</p></li>
<li><p><input type="checkbox"> 你有申明你的网站在其他主要的网络上做
知名度经营的理由吗？你不但想确认没有人知道你的账户名，而且如果你是
一个新的网站或者公司，你可以经常的在你的搜索结果页面上加上你公司的
品牌。如下所示(注：brand-name是公司的名称)：</p>

<ul>
<li><a href="http://www.twitter.com/brand-name">http://www.twitter.com/brand-name</a></li>
<li><a href="http://www.facebook.com/brand-name">http://www.facebook.com/brand-name</a></li>
<li><a href="http://www.yelp.com/biz/brand-name">http://www.yelp.com/biz/brand-name</a></li>
<li><a href="http://www.youtube.com/user/brand-name">http://www.youtube.com/user/brand-name</a></li>
<li><a href="http://www.linkedin.com/in/brand-name">http://www.linkedin.com/in/brand-name</a></li>
<li><a href="http://brand-name.wordpress.com/">http://brand-name.wordpress.com/</a></li>
<li><a href="http://brand-name.tumblr.com/">http://brand-name.tumblr.com/</a></li>
<li><a href="http://pinterest.com/brand-name/">http://pinterest.com/brand-name/</a></li>
<li><a href="http://www.hulu.com/profiles/brand-name">http://www.hulu.com/profiles/brand-name</a></li>
<li><a href="http://technorati.com/people/brand-name">http://technorati.com/people/brand-name</a></li>
<li><a href="http://about.me/brand-name">http://about.me/brand-name</a></li>
<li><a href="http://brand-name.posterous.com/">http://brand-name.posterous.com/</a></li>
<li><a href="http://profile.typepad.com/brand-name">http://profile.typepad.com/brand-name</a></li>
<li><a href="http://www.squidoo.com/lensmasters/brand-name">http://www.squidoo.com/lensmasters/brand-name</a></li>
<li><a href="http://www.stumbleupon.com/stumbler/brand-name">http://www.stumbleupon.com/stumbler/brand-name</a></li>
<li><a href="http://www.etsy.com/people/brand-name">http://www.etsy.com/people/brand-name</a></li>
<li><a href="http://en.gravatar.com/brand-name">http://en.gravatar.com/brand-name</a></li>
<li><a href="http://www.scribd.com/brand-name">http://www.scribd.com/brand-name</a></li>
<li><a href="http://brand-name.livejournal.com/">http://brand-name.livejournal.com/</a></li>
<li><a href="http://brand-name.hubpages.com/">http://brand-name.hubpages.com/</a></li>
<li><a href="http://www.flickr.com/photos/brand-name/">http://www.flickr.com/photos/brand-name/</a></li>
<li><a href="http://photobucket.com/user/brand-name/profile/">http://photobucket.com/user/brand-name/profile/</a></li>
</ul>
</li>
<li><p><input type="checkbox"> 你的网站对移动端友好吗？你是否使用
<a href="http://www.browserstack.com/">BrowserStack</a>
进行了多浏览器兼容测试？</p></li>
<li><p><input type="checkbox"> 你有在Facebook, Twitter, LinkedIn,
Google+等社交网络上为你的网站运维？</p></li>
<li><p><input type="checkbox"> 你是否为你的网站打上作者标签？使用
<a href="http://www.clickminded.com/get-on-google-plus-why-authorship-markup-now-matters/">Authorship Markup
Walkthrough</a>.</p></li>
<li><p><input type="checkbox"> 你有使用
<a href="http://mysiteauditor.com/">My Site Auditor Report</a>
再次检查你网站的一切吗？</p></li>
<li><p><input type="checkbox"> 你有使用这些
<a href="http://www.clickminded.com/free-seo-tools/">免费SEO工具</a>，
在你完成审核之前，再次处理你的网站吗？如果你不懂一些高层次概念，你有
复习<a href="http://www.clickminded.com/seo-101-handbook/">SEO新手指南</a>
吗？</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[海边的卡夫卡和叫乌鸦的少年]]></title>
    <link href="http://yuez.me/hai-bian-de-qia-fu-qia-he-jiao-wu-ya-de-shao-nian/"/>
    <updated>2014-06-22T09:02:39+08:00</updated>
    <id>http://yuez.me/hai-bian-de-qia-fu-qia-he-jiao-wu-ya-de-shao-nian</id>
    <content type="html"><![CDATA[<p>约莫二月，于书店之中偶遇《海边的卡夫卡》，作为我喜爱的作者的得意之作，自是不由分说，
当即拿下。说来惭愧，购书至今四月有余，每日只拾缀两节，至多不过倍数，仍是尚有十之一二
并未阅读。虽然如此，心中之十之八九已是按捺不住，一起倾露。</p>

<blockquote><p>《海边的卡夫卡》这部长篇小说出来的的基本构思浮现出来的时候，我的脑袋里的念头最先是
写一个十五岁的少年为主人公的故事。至于如何发展则全然心中无数。——村上春树</p></blockquote>

<p>诚然如之所述，全书故事发展天马行空，甚至荒诞离奇，却又因作者文笔老练，使情节生动自然，
时常精妙的哲学思辨，犹如羚羊挂角，妙不可言。然而白玉微瑕，以我来看，不足之处至少有二：
其一，情节铺垫冗长，兼之使用两条叙事线索，半本之前，线索之间也并无关联，难免让人不知
所云，所幸半本之后，峰回路转，精彩纷呈；其二，所述许多思想不该是一位十五岁少年应有的
，是具有高度哲学境界不惑之士的所思所想。作者似是意识到这个问题，于是安排一位名叫乌鸦
（卡夫卡在捷克语中意为乌鸦）的少年栖息少年体内，作为一种隐喻的存在，每每悄然出现。</p>

<p>故事的开始也是源于叫乌鸦的少年。</p>

<p>“毕竟什么都没开始，不好尽说泄气话。不管怎么说是你自己的人生，基本上只能按照你自己的
想法来做。”</p>

<p>听到来自叫乌鸦的少年的肯定，田村卡夫卡君——幼年被母亲抛弃，又被父亲诅咒——决定离家出走
成为最坚强的少年。</p>

<blockquote><p>他不知道，他将面对的是波涛汹涌，充满荒谬与悖论的成人世界。</p></blockquote>

<p>这样的书评数不胜数，而且空洞乏力，用几个词语概括主角的经历，又以一段哲学性的话陈诉总
结。初时我也有此意，旋即一想，如此一来何必费心费神写什么劳什子的书评，摘抄借鉴，省时
省力。还是换个思路来吧。</p>

<p>《海边的卡夫卡》主线故事固然精彩，更吸引我的却是几位配角人物的故事。年老不识字的中田
和少不上进的星野，端庄智慧的佐伯与男心女身的上岛。他们四人组成了两队奇怪的组合，既对
立又统一。同样只有一半影子的中田和佐伯，前者只知道现在，后者却活在回忆中。唯中田马首
是瞻，愚钝的星野；爱慕佐伯，以佐伯为中心，聪慧的上岛。目不识丁，偏爱看书的中田；识字
但从不看书的星野；彬彬有礼，和蔼热情，然而心却不在那里的佐伯；慎思自立，知识渊博，管
理图书馆的中岛。还有着墨了了，隐喻为卡夫卡姐姐的樱花。他们五人，伴随着各自的悖谬与荒
诞的经历——人与猫语，有鱼天降，灵魂出窍，入口之石……——有的来自现实之中，有的来自现实
之外，愿意拯救而后从结果上拯救了十五岁少年的灵魂，让他从内心的冲动、不安、懦弱与绝望
中挣脱。于是，我们领教了世界是何等的凶顽，同时又得知世界可以变得温存和美好。人的精神
也在这种矛盾、离奇和复杂的过程中不断蜕变，伸张和成长。甚至需要一些心灵魔术才能跟随作
者在这座心灵迷宫里的脚步。</p>

<p>总的想来，被拯救的不只是十五岁的少年，每个人都在各自的角度得到了不同意义上的拯救。中
田做回了普通的自己，佐伯得以打破回忆枷锁，星野找到了人生中正确的方向……每个人在帮助他
人的同时，也在接受别人的帮助，最终是两个人的灵魂都得到了升华。这何尝不是作者想要传达
的信息。帮助他人又因此帮助自己打破了桎梏，多么美好的社会啊！</p>

<p>闲话多谈。应该从这个故事中学习什么？以我之论，理所当然是态度。何谓态度？</p>

<p>首先，面对苛刻不公的生活要勇敢机智地抗争。勇敢和智慧好比斯巴达手中的长矛和坚盾，一个
斗争，一个保护。第二，人是具有社会性的动物，很容易地迷失在群体意志中。保持独立思考，
追求真理，是应当学习的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重新认识Java，发现你的细节]]></title>
    <link href="http://yuez.me/chong-xin-ren-shi-java,fa-xian-ni-de-xi-jie/"/>
    <updated>2014-01-25T09:08:34+08:00</updated>
    <id>http://yuez.me/chong-xin-ren-shi-java,fa-xian-ni-de-xi-jie</id>
    <content type="html"><![CDATA[<h2>序言</h2>

<p>“人和动物的本质区别是会制造和使用劳动工具”，这是初中历史课上的内容。<br/>
“工欲善其事，必先利其器”，先贤留下的警世恒言。 <br/>
“高明的剑客，通晓其剑。是何材质，轻重几许，剑刃几分……”。</p>

<p>自古以来，人们便被教育工具的重要性。而人类，也是从文明伊始便发明种类繁复的工具，用以提高人的劳动
效率或者便利人的生活。计算机，人类有史以来最伟大的工具之一，引爆了整个人类发展的进程，使得最近三
十年以来人类信息增加的总量超过了过去几千年的信息增长量。语言，人类最伟大的工具，在整个人类文明中
扮演了最重要的角色。编程语言相对于计算机而言便等于语言至于人类，其重要性可见一斑。</p>

<p>有了计算机和编程语言，那么自然便衍生了一种以它们为生的职业——程序员，使用编程语言建设计算机世界的
劳动者。我作为一名使用Java编程语言的程序员，试问自己，我是否了解我所使用的工具呢？答案是没有。所
以我写下这篇博文。</p>

<h2>操纵字符串</h2>

<p><strong>显而易见，字符串操作是计算机程序中最常见的行为。</strong>在Java大展拳脚的Web系统中更是如此。</p>

<h3>String，其实是不可变的</h3>

<blockquote><p>Strings are constant; their values cannot be changed after they are created.
String buffers s
  upport mutable strings. Because String objects are immutable they can be shared.</p></blockquote>

<p>举例来说:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">char</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="o">{</span> <span class="sc">&#39;a&#39;</span><span class="o">,</span> <span class="sc">&#39;b&#39;</span><span class="o">,</span> <span class="sc">&#39;c&#39;</span> <span class="o">};</span>
</span><span class='line'><span class="n">String</span> <span class="n">str</span>  <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过查询JDK文档会发现，String类每一个看起来会修改字符串的方法，实际上都是创建了一个全新的字符串。
通过一则代码说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Immutable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;immutable&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">ss</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ss</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/** Output:</span>
</span><span class='line'><span class="cm">  *  immutable</span>
</span><span class='line'><span class="cm">  *  IMMUTABLE</span>
</span><span class='line'><span class="cm">  */</span>
</span></code></pre></td></tr></table></div></figure>


<p>在调用<code>toUpperCase</code>方法的实际上在内存中为该对象创建了一个副本，对其的操作都是在这个副
本上进行的。</p>

<h3>重载的“+”与StringBuilder</h3>

<p>在Java中针对String类，重新定义了操作符“+”的行为，它可以连接多个字符串。先看一段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">mongo</span> <span class="o">=</span> <span class="s">&quot;mongo&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;This is a database named &quot;</span> <span class="o">+</span> <span class="n">mongo</span> <span class="o">+</span> <span class="s">&quot; it&#39;s awesome.&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>想象一下这段代码是如何工作的：先创建一个<code>mongo</code>对象，在执行连接操作时，先为<code>This
is a database named</code> 创建一个对象，再为连接后的字符串创建一个对象，以此类推。那么在内存中不
可避免的会出现巨大的浪费，带来性能问题。实际的情况是怎样的呢？使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javap -c CLASSNAME
</span></code></pre></td></tr></table></div></figure>


<p>命令来反编译这段代码的二进制文件，看看在Java中到底是以什么样的方式执行字符串的连接操作的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">Compiled</span> <span class="no">from</span> <span class="err">&quot;</span><span class="no">Concatenation.java</span><span class="err">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">public</span> <span class="no">class</span> <span class="no">Concatenation</span> <span class="err">{</span>
</span><span class='line'>  <span class="nf">public</span> <span class="no">Concatenation</span><span class="p">()</span><span class="err">;</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>        <span class="err">0:</span> <span class="nf">aload_0</span>
</span><span class='line'>        <span class="err">1:</span> <span class="nf">invokespecial</span> <span class="c">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>        <span class="err">4:</span> <span class="nf">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">public</span> <span class="no">static</span> <span class="no">void</span> <span class="no">main</span><span class="p">(</span><span class="no">java.lang.String</span><span class="err">[]</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>        <span class="err">0:</span> <span class="nf">ldc</span>           <span class="c">#2                  // String mongo</span>
</span><span class='line'>        <span class="err">2:</span> <span class="nf">astore_1</span>
</span><span class='line'>        <span class="err">3:</span> <span class="nf">new</span>           <span class="c">#3                  // class java/lang/StringBuilder</span>
</span><span class='line'>        <span class="err">6:</span> <span class="nf">dup</span>
</span><span class='line'>        <span class="err">7:</span> <span class="nf">invokespecial</span> <span class="c">#4                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="err">10:</span> <span class="nf">ldc</span>           <span class="c">#5                  // String This is a database named</span>
</span><span class='line'>      <span class="err">12:</span> <span class="nf">invokevirtual</span> <span class="c">#6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>      <span class="err">15:</span> <span class="nf">aload_1</span>
</span><span class='line'>      <span class="err">16:</span> <span class="nf">invokevirtual</span> <span class="c">#6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>      <span class="err">19:</span> <span class="nf">ldc</span>           <span class="c">#7                  // String  it&#39;s awesome.</span>
</span><span class='line'>      <span class="err">21:</span> <span class="nf">invokevirtual</span> <span class="c">#6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>      <span class="err">24:</span> <span class="nf">invokevirtual</span> <span class="c">#8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>      <span class="err">27:</span> <span class="nf">astore_2</span>
</span><span class='line'>      <span class="err">28:</span> <span class="nf">getstatic</span>     <span class="c">#9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span>
</span><span class='line'>      <span class="err">31:</span> <span class="nf">aload_2</span>
</span><span class='line'>      <span class="err">32:</span> <span class="nf">invokevirtual</span> <span class="c">#10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
</span><span class='line'>      <span class="err">35:</span> <span class="nf">return</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段反编译的代码相当于运行在Java虚拟机上的汇编语句。从中可以看到，编译器为我们自动的引入了
<code>java.lang.StringBuilder</code>对象，并且在每一次的连接操作时会调用它的<code>append</code>方法，最
后使用<code>toString</code>生成结果。无疑这是一个更高效的行为，但是<code>StringBuilder</code>又是
什么呢？</p>

<blockquote><p>A mutable sequence of characters.</p></blockquote>

<p>在<code>StringBuilder</code>中最核心的两个方法是<code>`append</code>和&#8217;toString`。它们接收
任何对象，将对象转成字符串后添加或者插入到String Builder中。
通常</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>与</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">inset</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">x</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>有着一样的效果。</p>

<p><code>StringBuilder</code>的方法还包括：insert, repleace, substring, delete
甚至是reverse。</p>

<p>有了编译器的自动优化就可以随意的使用字符串了吗？下面代码使用两种方式生成一个字符串：第一种使用多个
String对象，让编译器为我们优化；第二种显式的调用StringBuilder。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">implicit</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">+=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">explicit</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译一下，看看实际调用过程：A mutable sequence of characters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">Compiled</span> <span class="no">from</span> <span class="err">&quot;</span><span class="no">WithStringBuilder.java</span><span class="err">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">public</span> <span class="no">class</span> <span class="no">WithStringBuilder</span> <span class="err">{</span>
</span><span class='line'>  <span class="nf">public</span> <span class="no">WithStringBuilder</span><span class="p">()</span><span class="err">;</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>        <span class="err">0:</span> <span class="nf">aload_0</span>
</span><span class='line'>        <span class="err">1:</span> <span class="nf">invokespecial</span> <span class="c">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>        <span class="err">4:</span> <span class="nf">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">public</span> <span class="no">java.lang.String</span> <span class="no">implicit</span><span class="p">(</span><span class="no">java.lang.String</span><span class="err">[]</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>        <span class="err">0:</span> <span class="nf">ldc</span>           <span class="c">#2                  // String </span>
</span><span class='line'>        <span class="err">2:</span> <span class="nf">astore_2</span>
</span><span class='line'>        <span class="err">3:</span> <span class="nf">aload_1</span>
</span><span class='line'>        <span class="err">4:</span> <span class="nf">astore_3</span>
</span><span class='line'>        <span class="err">5:</span> <span class="nf">aload_3</span>
</span><span class='line'>        <span class="err">6:</span> <span class="nf">arraylength</span>
</span><span class='line'>        <span class="err">7:</span> <span class="nf">istore</span>        <span class="mi">4</span>
</span><span class='line'>        <span class="err">9:</span> <span class="nf">iconst_0</span>
</span><span class='line'>      <span class="err">10:</span> <span class="nf">istore</span>        <span class="mi">5</span>
</span><span class='line'>      <span class="err">12:</span> <span class="nf">iload</span>         <span class="mi">5</span>
</span><span class='line'>      <span class="err">14:</span> <span class="nf">iload</span>         <span class="mi">4</span>
</span><span class='line'>      <span class="err">16:</span> <span class="nf">if_icmpge</span>     <span class="mi">51</span>
</span><span class='line'>      <span class="err">19:</span> <span class="nf">aload_3</span>
</span><span class='line'>      <span class="err">20:</span> <span class="nf">iload</span>         <span class="mi">5</span>
</span><span class='line'>      <span class="err">22:</span> <span class="nf">aaload</span>
</span><span class='line'>      <span class="err">23:</span> <span class="nf">astore</span>        <span class="mi">6</span>
</span><span class='line'>      <span class="err">25:</span> <span class="nf">new</span>           <span class="c">#3                  // class java/lang/StringBuilder</span>
</span><span class='line'>      <span class="err">28:</span> <span class="nf">dup</span>
</span><span class='line'>      <span class="err">29:</span> <span class="nf">invokespecial</span> <span class="c">#4                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>      <span class="err">32:</span> <span class="nf">aload_2</span>
</span><span class='line'>      <span class="err">33:</span> <span class="nf">invokevirtual</span> <span class="c">#5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>      <span class="err">36:</span> <span class="nf">aload</span>         <span class="mi">6</span>
</span><span class='line'>      <span class="err">38:</span> <span class="nf">invokevirtual</span> <span class="c">#5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>      <span class="err">41:</span> <span class="nf">invokevirtual</span> <span class="c">#6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>      <span class="err">44:</span> <span class="nf">astore_2</span>
</span><span class='line'>      <span class="err">45:</span> <span class="nf">iinc</span>          <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>      <span class="err">48:</span> <span class="nf">goto</span>          <span class="mi">12</span>
</span><span class='line'>      <span class="err">51:</span> <span class="nf">aload_2</span>
</span><span class='line'>      <span class="err">52:</span> <span class="nf">areturn</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">public</span> <span class="no">java.lang.String</span> <span class="no">explicit</span><span class="p">(</span><span class="no">java.lang.String</span><span class="err">[]</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>    <span class="nl">Code:</span>
</span><span class='line'>        <span class="err">0:</span> <span class="nf">new</span>           <span class="c">#3                  // class java/lang/StringBuilder</span>
</span><span class='line'>        <span class="err">3:</span> <span class="nf">dup</span>
</span><span class='line'>        <span class="err">4:</span> <span class="nf">invokespecial</span> <span class="c">#4                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>        <span class="err">7:</span> <span class="nf">astore_2</span>
</span><span class='line'>        <span class="err">8:</span> <span class="nf">aload_1</span>
</span><span class='line'>        <span class="err">9:</span> <span class="nf">astore_3</span>
</span><span class='line'>      <span class="err">10:</span> <span class="nf">aload_3</span>
</span><span class='line'>      <span class="err">11:</span> <span class="nf">arraylength</span>
</span><span class='line'>      <span class="err">12:</span> <span class="nf">istore</span>        <span class="mi">4</span>
</span><span class='line'>      <span class="err">14:</span> <span class="nf">iconst_0</span>
</span><span class='line'>      <span class="err">15:</span> <span class="nf">istore</span>        <span class="mi">5</span>
</span><span class='line'>      <span class="err">17:</span> <span class="nf">iload</span>         <span class="mi">5</span>
</span><span class='line'>      <span class="err">19:</span> <span class="nf">iload</span>         <span class="mi">4</span>
</span><span class='line'>      <span class="err">21:</span> <span class="nf">if_icmpge</span>     <span class="mi">43</span>
</span><span class='line'>      <span class="err">24:</span> <span class="nf">aload_3</span>
</span><span class='line'>      <span class="err">25:</span> <span class="nf">iload</span>         <span class="mi">5</span>
</span><span class='line'>      <span class="err">27:</span> <span class="nf">aaload</span>
</span><span class='line'>      <span class="err">28:</span> <span class="nf">astore</span>        <span class="mi">6</span>
</span><span class='line'>      <span class="err">30:</span> <span class="nf">aload_2</span>
</span><span class='line'>      <span class="err">31:</span> <span class="nf">aload</span>         <span class="mi">6</span>
</span><span class='line'>      <span class="err">33:</span> <span class="nf">invokevirtual</span> <span class="c">#5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'>      <span class="err">36:</span> <span class="nf">pop</span>
</span><span class='line'>      <span class="err">37:</span> <span class="nf">iinc</span>          <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>      <span class="err">40:</span> <span class="nf">goto</span>          <span class="mi">17</span>
</span><span class='line'>      <span class="err">43:</span> <span class="nf">aload_2</span>
</span><span class='line'>      <span class="err">44:</span> <span class="nf">invokevirtual</span> <span class="c">#6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'>      <span class="err">47:</span> <span class="nf">areturn</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在反编译的代码中，第一种方法的循环体从12到48行，而第二种方法的循环体是从17到40行，更加的精简。
并且第二种方法只生成了一个StringBuilder对象。显式地创建StringBuilder对象还支持为其制定大小。如
果你知道需要的字符串大概的长短，那么指定StringBuilder的大小可以避免多次重新分配缓存。</p>

<p>因此在为一个类编写<code>toString</code>方法时，如果操作比较简单，那么可以信赖编译器。如果要在方
中使用循环，最好还是显式地声明<code>StringBuilder</code>。</p>

<h3>格式化输出，打印出美丽的字符串</h3>

<p>在 JAVASE5 中，终于添加了格式化输出的功能。可以使用printf(),
System.out.format()和Formatter类来
控制与排版字符串的输出。</p>

<ul>
<li><code>printf()</code>, 类似于c语言中的<code>printf()</code>函数，与c中不同的是java的printf()支持使用“+”符号连接字符串。</li>
<li><code>System.out.format()</code>, 与<code>printf()</code>是等价的。只需要一个简单地格式化字符串和一些对应的参数。</li>
<li>Formatter类，将你需要格式化的信息由一个<code>OutputStream</code>或者<code>OutputWriter</code>打印出去。</li>
</ul>


<p>Formatter类的简单示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Formatter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Turtle</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Formatter</span> <span class="n">f</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Turtle</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Formatter</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">f</span> <span class="o">=</span> <span class="n">f</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s The Turtle is at (%d, %d)\n&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Turtle</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Turtle</span><span class="o">(</span><span class="s">&quot;Li Lei&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Formatter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">42</span><span class="o">);</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>本例中，将格式化的结果打印到System.out中。</p>

<h3>格式化说明符</h3>

<p>在插入数据时，如果想要控制空格与对齐，那么就需要更精细的格式修饰符。一下是其抽象的语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%<span class="o">[</span>arguments_index<span class="nv">$]</span><span class="o">[</span>flages<span class="o">][</span>width<span class="o">][</span>.precision<span class="o">]</span> conversion
</span></code></pre></td></tr></table></div></figure>


<p>用一段代码来说明这个语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Receipt</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">total</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Formatter</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Formatter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%-15s %5s %10s\n&quot;</span><span class="o">,</span> <span class="s">&quot;Item&quot;</span><span class="o">,</span> <span class="s">&quot;Qty&quot;</span><span class="o">,</span> <span class="s">&quot;Price&quot;</span><span class="o">);</span> <span class="c1">//</span>
</span><span class='line'><span class="n">默认的对齐方式为右对齐</span><span class="err">，</span><span class="n">加上</span><span class="o">-</span><span class="n">之后变为左对齐</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%-15s %5s %10s\n&quot;</span><span class="o">,</span> <span class="s">&quot;----&quot;</span><span class="o">,</span> <span class="s">&quot;---&quot;</span><span class="o">,</span> <span class="s">&quot;-----&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">qty</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%-15.15s %5d %10.2f\n&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">qty</span><span class="o">,</span> <span class="n">price</span><span class="o">);</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printTotal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%-15s %5s %10.2f\n&quot;</span><span class="o">,</span> <span class="s">&quot;Tax&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="n">total</span> <span class="o">*</span> <span class="mf">0.06</span><span class="o">);</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%-15s %5s %10s\n&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;-----&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%-15s %5s %10.2f\n&quot;</span><span class="o">,</span> <span class="s">&quot;Total&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="n">total</span> <span class="o">*</span> <span class="mf">1.06</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Receipt</span> <span class="n">recerp</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Receipt</span><span class="o">();</span>
</span><span class='line'>        <span class="n">recerp</span><span class="o">.</span><span class="na">printTitle</span><span class="o">();</span>
</span><span class='line'>        <span class="n">recerp</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;NanJing Tofu&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mf">5.8</span><span class="o">);</span>
</span><span class='line'>        <span class="n">recerp</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;LaoGanMa DouBanJiang&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mf">7.2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">recerp</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Little Cabbage&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mf">2.8</span><span class="o">);</span>
</span><span class='line'>        <span class="n">recerp</span><span class="o">.</span><span class="na">printTotal</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果如下：</p>

<pre><code>Item              Qty      Price
----              ---      -----
NanJing Tofu        5       5.80
LaoGanMa DouBan     2       7.20
Little Cabbage      1       2.80
Tax                         0.95
                           -----
Total                      16.75
</code></pre>

<h3>字符转换说明</h3>

<p>转换符一般被分成以下几类：</p>

<ul>
<li><strong>General</strong>，可以转化任意对象</li>
<li><strong>Character</strong>，可以转化用unicode表示的字符。比如char, Character, byte, Byte,
short, Short. 也可以
用来转换<code>Character.validCodePoint()</code>返回值为true的int或者Integer对象。</li>
<li><strong>Numeric</strong>，转换整数或者浮点数。</li>
<li><strong>Date/Time</strong>，接受long、Long、Date和Calendar类型的参数。</li>
<li><strong>Percent</strong>，产生一个字面量“%”。</li>
<li><strong>Line Separator</strong>，产生一条水平分割线。</li>
</ul>


<p>下面用一张表格展示可接受参数的符号</p>

<table>
<thead>
<tr>
<th>符号               </th>
<th> 参数类型        </th>
<th> 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lsquo;b&rsquo;, &lsquo;B&rsquo;           </td>
<td> General         </td>
<td> 如果参数是null或者<code>String.valueOf(arg)</code>返回值为false的值，得到的结果则是false。否则，结果为true。</td>
</tr>
<tr>
<td>&lsquo;h&rsquo;, &lsquo;H&rsquo;           </td>
<td> General         </td>
<td> 如果参数是null则返回“null”。否则返回这个参数的<code>Integer.toHexString()</code>的返回值。</td>
</tr>
<tr>
<td>&lsquo;c&rsquo;, &lsquo;C&rsquo;           </td>
<td> Character       </td>
<td> 返回值为Character。</td>
</tr>
<tr>
<td>&rsquo;s&#8217;, &rsquo;S&#8217;           </td>
<td> General         </td>
<td> 如果参数是null则返回&#8221;null&#8221;；如果参数是<code>Formattable</code>的实现类，则调用参数的<code>arg.formatTo()</code>方法，并且将方法的返回值作为结果；最后返回的结果为<code>arg.toString()</code>。</td>
</tr>
<tr>
<td>&rsquo;d&#8217;                </td>
<td> Integer         </td>
<td> 返回值为格式化后的十进制数字。</td>
</tr>
<tr>
<td>&lsquo;o&rsquo;                </td>
<td> Integer         </td>
<td> 返回值为格式化后的八进制数字。</td>
</tr>
<tr>
<td>&lsquo;x&rsquo;, &lsquo;X&rsquo;           </td>
<td> Integer         </td>
<td> 返回值为格式化后的十六进制数字。</td>
</tr>
<tr>
<td>&lsquo;e&rsquo;, &lsquo;E&rsquo;           </td>
<td> floating point  </td>
<td> 将浮点数用科学计数法表示出来。</td>
</tr>
<tr>
<td>&lsquo;f&rsquo;                </td>
<td> floating point  </td>
<td> 返回值为格式化的浮点数。</td>
</tr>
<tr>
<td>&lsquo;g&rsquo;, &lsquo;G&rsquo;           </td>
<td> floating point  </td>
<td> 返回用科学计数法表示的，固定精度的经过四舍五入的浮点数。</td>
</tr>
<tr>
<td>&lsquo;a&rsquo;, &lsquo;A&rsquo;           </td>
<td> floating point  </td>
<td> 返回指数形式有效位的十六进制浮点数。</td>
</tr>
<tr>
<td>&rsquo;t&#8217;, &rsquo;T&#8217;           </td>
<td> Data/Time       </td>
<td> 将日期和时间转化成字符串。</td>
</tr>
<tr>
<td>&lsquo;%&rsquo;                </td>
<td> percert         </td>
<td> 返回一个百分比。</td>
</tr>
<tr>
<td>&lsquo;n&rsquo;                </td>
<td> line separator  </td>
<td> 返回一条分割线。</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAS 集成小战]]></title>
    <link href="http://yuez.me/cas-ji-cheng-xiao-zhan/"/>
    <updated>2013-12-06T11:32:25+08:00</updated>
    <id>http://yuez.me/cas-ji-cheng-xiao-zhan</id>
    <content type="html"><![CDATA[<blockquote><p>近来，项目中需要整合单点登录系统。按照项目要求，工程中原先的单点登录无法完成任务，需要重新加工。于
是选用<a href="http://www.jasig.org/">JA-SIG</a>的<code>CAS</code>系统整合项目中。</p></blockquote>

<p>在这开始之前需要明白什么是单点登录。</p>

<h3>什么是单点登录系统</h3>

<p>在企业中，随着系统中使用工程数量的增加，一个显而易见的问题就出现在眼前——在各个系统之间切换时，总是需要频繁的切换登陆，这浪费了大量的时间，严重降低了用户体验。于是我们需要一套方案可以使得一名信任用户在A系统登录之后，在B、C等系统中也将被视为已登录用户，从而避免重复登录。</p>

<p>我们都知道，在游玩公园时，只需要在售票处购买一张门票，就可以游玩公园内的所有景点而不需要在每个景点前重复购票。单点登录系统也好比这样，设置一个所有系统的统一入口，当用户登录之后，生成一个Ticket交给这名用户，随后用户携带这个Ticket访问各个系统，验证Ticket合法后，即可认为该用户已经登录。</p>

<h4>Ticket储存</h4>

<ul>
<li>Cookie-based</li>
<li>Broker-based</li>
<li>Agent-based</li>
<li>Token-based</li>
<li>Agent and Broker-based</li>
<li>SAML. SAML(Security Assertion Markup Language，安全断言标记语言）的出现大大简化了SSO，并被OASIS批准为SSO的执行标准。开源组织OpenSAML 实现了SAML规范。</li>
</ul>


<p>在集成CAS系统之前，还需要为开启TOMCAT的SSL功能，并且是使用<code>keytool</code>生成安全证书，导入安全证书。</p>

<h3>开启SSL</h3>

<p><a href="http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html" title="keytool api">keytool api</a></p>

<ol>
<li>创建keystore</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -genkey -alias Example -keyalg RSA -validity <span class="m">3600</span> -keystore example.keystore -storepass changeit
</span></code></pre></td></tr></table></div></figure>


<p><strong>CN需要与你访问的域名相同</strong></p>

<ol>
<li>导出crt</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -export -alias Example -file example.crt -keystore example.keystore -storepass changeit
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>将crt导出Java证书库中($JAVA_HOME/jre/lib/security/cacerts)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>keytool -import -alias Example -file example.crt -keystore <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>配置tomcat的server.xml文件，开启ssl</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8443&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span> <span class="na">SSLEnable=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">maxThreads=</span><span class="s">&quot;150&quot;</span> <span class="na">scheme=</span><span class="s">&quot;https&quot;</span> <span class="na">secure=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">clientAuth=</span><span class="s">&quot;false&quot;</span> <span class="na">sslProtocol=</span><span class="s">&quot;TLS&quot;</span>
</span><span class='line'>    <span class="na">keystoreFile=</span><span class="s">&quot;PATH/TO/KEYSTORE&quot;</span>
</span><span class='line'>    <span class="na">keystorePass=</span><span class="s">&quot;changeit&quot;</span>
</span><span class='line'>    <span class="na">truststoreFile=</span><span class="s">&quot;$JAVA_HOME/jre/lib/security/cacerts&quot;</span>
</span><span class='line'>    <span class="na">truststorePass=</span><span class="s">&quot;changeit&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，运行tomcat，访问<code>https://localhost:8443</code>如果在浏览器窗口出现安全锁，即已经成功打开tomcat的ssl功能。</p>

<p>以上准备工作完成之后，就可以开始将CAS系统集成到我们的项目中了</p>

<hr />

<p>需要集成进系统中的CAS又是什么呢？</p>

<h3>简介CAS</h3>

<p><em>CAS Version 3.5.2， CAS Client Version 3.1.10</em></p>

<p><a href="https://wiki.jasig.org/display/CASUM/Home" title="CAS User Manual">CAS User Manual</a></p>

<p>CAS是一套由耶鲁大学开发的企业级单点登录服务。</p>

<ul>
<li>公开、文档式协议</li>
<li>开源Java Server容器</li>
<li>客户端支持JAVA、.NET、PHP、Perl、Apache等集成</li>
<li>社区型文档</li>
<li>大型讨论社区</li>
</ul>


<p>这次集成的目标是基于JDBC数据库验证。如果需要其他验证方式，请参看用户手册。CAS的配置分为客户端和服务器端，先从客户端的配置开始。</p>

<h3>CAS客户端配置</h3>

<p>客户端即我们需要集成的系统。</p>

<p>添加cas-client-core.jar文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.jasig.cas<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>cas-client-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>3.1.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>web.xml</code>文件中添加<code>CAS Authentication Filter</code>和<code>CAS Validation Filter</code>，具体配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>CAS Authentication Filter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-class&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>casServerLoginUrl<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>https://exmaple.com:8443/cas/login<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>serverName<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>http://example.com:8080<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>CAS Validation Filter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-class&gt;</span>org.jasig.cas.client.validation.Saml11TicketValidationFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>casServerUrlPrefix<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>https://exmaple.com:8443/cas<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>serverName<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>http://example.com:8080<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>redirectAfterValidation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>useSession<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;para-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>CAS Authentication Filter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>CAS Validation Filter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些配置是使用CAS的最小配置，Validation
Filter可以有多种，如果需要使用使用其他Filter可以参考用户手册。在这里使用
<code>Saml11TicketValidatioFilter</code>是为了在CAS验证登陆的时候在<code>HttpServletRequest</code>
中添加更多可以使用的用户信息（从数据库中取出来的）</p>

<p>客户端的配置就这样完成了，很简单吧。下面进入服务器端的配置。</p>

<h3>服务器端配置</h3>

<p>服务器端即CAS Server</p>

<p>为了支持集成jdbc验证，需要添加jar文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.jasig.cas<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>cas-server-support-jdbc <span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>${cas.version} <span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>服务器端的配置集中在<code>deployerConfigContext.xml</code>文件中。</p>

<p>首先配置<code>authenticationHandlers</code>，这里支持配置多个handler，使用多种验证方式。我们只用jdbc一种。</p>

<p>在list中添加bean</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler&quot;</span>
</span><span class='line'>    <span class="na">p:dataSource-ref=</span><span class="s">&quot;dataSource&quot;</span>
</span><span class='line'>    <span class="na">p:passwordEncoder-ref=</span><span class="s">&quot;passwordEncoder&quot;</span>
</span><span class='line'>    <span class="na">p:sql=</span><span class="s">&quot;select password from T where username = ?&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>list中有一个simpleAuthenticationHanlder需要删除，它是测试时使用，只要用户名密码相同即通过验证</strong></p>

<p>其中dataSource为必须属性。passwordEncoder是可选属性，它表示了密码的加密方式，CAS提供MD5和SHA1两种，当然你也可以自定义你的加密方式——实现org.jasig.cas.authentication.handler.PasswordEncoder接口。看了上面的配置很清楚的就知道了还需要配置dataSource和passwordEncoder。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>    <span class="na">p:driverClassName=</span><span class="s">&quot;org.postgresql.Driver&quot;</span>
</span><span class='line'>    <span class="na">p:url=</span><span class="s">&quot;jdbc:postgresql://127.0.0.1:5432/exmaple_db&quot;</span>
</span><span class='line'>    <span class="na">p:username=</span><span class="s">&quot;foo&quot;</span>
</span><span class='line'>    <span class="na">p:password=</span><span class="s">&quot;bar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;passwordEncoder&quot;</span> <span class="na">class=</span><span class="s">&quot;org.jasig.cas.authentication.Handler.DefaultPasswordEncoder&quot;</span>
</span><span class='line'>    <span class="na">p:characterEncoding=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;MD5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上，我们所需要的最低配置就已经完成了。如果在启动的时候报一些NoSuchMethod之类的错误，请检查jar是否有所缺失。</p>

<h3>总结</h3>

<p><code>CAS</code>是一个异常强大的单点登录系统。以上使用的都只是其中最基本的功能。如果需要使用更高级的功能，请参考用户手册0 0.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP 协议解析]]></title>
    <link href="http://yuez.me/http-xie-yi-jie-xi/"/>
    <updated>2013-11-21T11:15:21+08:00</updated>
    <id>http://yuez.me/http-xie-yi-jie-xi</id>
    <content type="html"><![CDATA[<p>从进入软件开发至今，也做了几个关于Web的应用。对于HTTP协议的理解不足让我吃到了不少的苦头，也曾在看到某一项解释之后一拍脑门：
原来是这样的，原来还能那么做。就从经典的3W理论（What, How,
Why）来深入一下HTTP，看看这个HTTP到底是个什么玩意。</p>

<hr />

<h3>戳破HTTP协议的面纱</h3>

<blockquote><p>超文本传输协议（英文：HyperText Transfer
Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协
   议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由
   统一资源标识符（Uniform Resource Identifiers，URI）来标识。
   <em>来自<a href="http://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">维基百科</a></em></p></blockquote>

<p>通常，由HTTP客户端发起一个请求，创建一个指向到服务器某个特定端口（默认是80）的
TCP连接，例如：<code>http://localhost:3000</code> 即创建一个指向本地3000端口的TCP连接。一旦服
务器端收到请求，会向客户端返回一个状态码，以及返回客户端请求的内容。</p>

<blockquote><p>HTTP状态码（英语：HTTP Status
Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由RFC
   2616规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。
   <em>来自<a href="http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">维基百科</a></em></p></blockquote>

<p>所有的状态码的第一个数字代表了响应的五种状态之一</p>

<ul>
<li>1xx：代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行
 结束。</li>
<li>2xx：代表请求接收、理解并且接受。</li>
<li>3xx：代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目
 标）在本次响应的Location域中指明。当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以
 在没有用户介入的情况下自动提交所需要的后续请求。</li>
<li>4xx：代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应
 该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。</li>
<li>5xx：代表了服务器在处理请求的过程中有错误或者异常状态发生，，也有可能是服务器意识到以当前的软硬件资源
 无法完成对请求的处理。</li>
</ul>


<h4>HTTP常见状态码</h4>

<table class="table">
  <tr><td>200<td><td>请求已经成功，请求所希望的响应头或者数据体将随着此响应返回</td></tr>
  <tr><td>202<td><td>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了</td></tr>
  <tr><td>204<td><td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息</td></tr>
  <tr><td>304<td><td>被请求的资源内容没有发生更改</td></tr>
  <tr><td>400<td><td>包含语法错误，无法被服务器解析</td></tr>
  <tr><td>403<td><td>服务器已经接收请求，但是拒绝执行</td></tr>
  <tr><td>404<td><td>请求失败，请求所希望得到的资源未在服务器上发现</td></tr>
  <tr><td>408<td><td>请求超时。客户端可以再次提交这一请求而无需任何修改</td></tr>
  <tr><td>500<td><td>服务器内部错误，无法处理请求</td></tr>
  <tr><td>502<td><td>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效响应</td></tr>
  <tr><td>504<td><td>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应</td></tr>
</table>


<h4>请求信息</h4>

<p>发出的请求信息包括以下几种：</p>

<ul>
<li>请求行（GET /images/logo.gif HTTP/1.1）</li>
<li>头(Accept-Language:en)</li>
<li>空行</li>
<li>其他消息体</li>
</ul>


<p>请求行和标题必须以<CR><LF>作为结尾。空行内必须只有<CR><LF>而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。</p>

<p>HTTP URL的格式如下：
<strong><a href="http://host">http://host</a>[&ldquo;:&#8221;port][abs_path]</strong></p>

<h4>请求方法</h4>

<p>HTTP/1.1协议中定义了八种方法来以不同的方式操作指定的资源：</p>

<ul>
<li>OPTIONS：这个方法可使服务器传回该资源所支持的所有HTTP请求方法。</li>
<li>HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部份。它的好处在
 于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</li>
<li>GET：读取指定资源数据。</li>
<li>POST：向指定资源提交数据，请求服务器进行处理。</li>
<li>PUT：向指定位置上传其最新内容。</li>
<li>DELETE：请求服务器删除REQUEST-URI所标识的资源。</li>
<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>
<li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经     <br/>
 由非加密的HTTP代理服务器）。</li>
<li>此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。</li>
</ul>


<hr />

<h4>消息报头</h4>

<p>HTTP头字段包括四类：</p>

<ul>
<li>General-header</li>
<li>Request-header</li>
<li>Response-header</li>
<li>Entity-header</li>
</ul>


<p><strong>General Header Fields</strong>
有少数报头用于所有的请求和响应消息，但是不用与被传输的实体，只用于传输的消息。</p>

<ul>
<li>Cache-Control：用于指定缓存指令，缓存指令是单向且独立的。HTTP1.0中使用的报头域为Pragma。

<ul>
<li>请求时指令：no-cache, no-store, max-age, max-stale, min-fresh, only-if-cached</li>
<li>响应时指令：public, private ,no-cache, no-store, no-transform, must-revalidate, proxy-revalidate, max-age, s-maxag</li>
</ul>
</li>
<li>Date：表示消息产生的时间和日期。</li>
<li>Connection：允许发送指定连接的选项。此header的含义是当client和server通信时对于长链接如何进行处理。
  如果client使用http1.1协议，但又不希望使用长链接，则需要在header中指明connection的值为close。</li>
<li>不常用：Trailer, Transfer-Encoding, Upgrade, Via, Warning</li>
</ul>


<p><strong>Request Header Fields</strong>
请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。</p>

<ul>
<li>Accept：指定客户端接收哪些类型的消息。例如：Accept: image/gir，表明客户端接收GIF图像格式资源。</li>
<li>Accept-Charset：指定客户端接收的字符类型。缺省接收所有字符类型。</li>
<li>Accept-Encoding：指定客户端可接收的内容编码。</li>
<li>Accept-Language：指定客户端接收的自然语言。</li>
<li>Authorization：用于证明客户端有权限查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为
 401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。</li>
<li>Host：指定被请求资源的主机和端口号，通常从HTTP URL中提取出来。</li>
<li>User-Agent：允许客户端将它的操作系统、浏览器和其他属性告诉服务器。不过，这个报头域不是必需的，如果我
 们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。</li>
<li>不常用：Expect, From, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Max-Forwards, Proxy-Authorization, Range, Referer, TE</li>
</ul>


<p>典型的请求信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Accept: text/html, application/xhtml+xml;q=0.9,image/webp,*/*;q=0.8</span>
</span><span class='line'><span class="err">Accept-Encoding:gzip,deflate,sdch</span>
</span><span class='line'><span class="err">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Cookie:connect.sid=s%3AdF5CuLecykHstAVmBnliuGmx.qyOANqn7nqe8rAZEVgPwpAgc2pKkfWgtnhNg7A1CWp0</span>
</span><span class='line'><span class="err">Host:yuez.me  </span>
</span><span class='line'><span class="err">If-None-Match:&quot;761947465&quot;</span>
</span><span class='line'><span class="err">Referer:http://yuez.me/</span>
</span><span class='line'><span class="err">User-Agent:Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.48 Safari/537.36</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Response Header Fields</strong></p>

<p>响应报头允许服务器传递不能放在状态中的附加响应信息，以及服务器的信息和对Request-URL所标识资源进行下一步访问的信息。</p>

<ul>
<li>Location：重定向接收者到一个新的位置。Location常用在更换域名的时候。</li>
<li>Server：Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。</li>
<li>不常用：Accept-Rangers, Age, ETag, Proxy-Authenticate, Retry-After, Vary, WWW-Authenticate</li>
</ul>


<p>典型的响应信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Date:Thu, 21 Nov 2013 13:57:59 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;761947465&quot;</span>
</span><span class='line'><span class="err">Server:nginx/1.1.19</span>
</span><span class='line'><span class="err">X-Powered-By:Express</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Entity Header Fields</strong>  <br/>
请求和响应消息都可以传送一个实体，一个实体由实体报头域和实体正文组成，但不是说实体报头域要和实体正文一起发送，可以只发送实体报头域。实体报头定义了实体正文和请求所标识的资源的元信息。</p>

<ul>
<li>Content-Encoding：指示已经被应用到实体正文中的附加内容编码。因而要获得Content-Type报头域中所引用
 的媒体类型，必须采用相应的解码机制。</li>
<li>Content-Language：描述了资源所用的自然语言。</li>
<li>Content-Length：指明实体正文的长度，以字节方式储存的十进制数字来表示。</li>
<li>Content-Type：指明发送给接收着实体正文的媒体类型。

<ul>
<li><a href="http://tool.oschina.net/commons">Content-Type常用对照表</a></li>
</ul>
</li>
<li>Last-Modified：指示资源最后修改的日期和时间。</li>
<li>Expires：给出响应过期的日期和时间。</li>
<li>不常用：Allow, Content-Location, Content-MD5, extension-header</li>
</ul>


<p>TO BE CONTINUE</p>
]]></content>
  </entry>
  
</feed>
